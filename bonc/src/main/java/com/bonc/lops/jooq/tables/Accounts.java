/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.AccountsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounts extends TableImpl<AccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.accounts</code>
     */
    public static final Accounts ACCOUNTS = new Accounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    /**
     * The column <code>public.accounts.id</code>.
     */
    public final TableField<AccountsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.accounts.name</code>.
     */
    public final TableField<AccountsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.accounts.email</code>.
     */
    public final TableField<AccountsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.accounts.password</code>.
     */
    public final TableField<AccountsRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.accounts.password_salt</code>.
     */
    public final TableField<AccountsRecord, String> PASSWORD_SALT = createField(DSL.name("password_salt"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.accounts.avatar</code>.
     */
    public final TableField<AccountsRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.accounts.interface_language</code>.
     */
    public final TableField<AccountsRecord, String> INTERFACE_LANGUAGE = createField(DSL.name("interface_language"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.accounts.interface_theme</code>.
     */
    public final TableField<AccountsRecord, String> INTERFACE_THEME = createField(DSL.name("interface_theme"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.accounts.timezone</code>.
     */
    public final TableField<AccountsRecord, String> TIMEZONE = createField(DSL.name("timezone"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.accounts.last_login_at</code>.
     */
    public final TableField<AccountsRecord, LocalDateTime> LAST_LOGIN_AT = createField(DSL.name("last_login_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.accounts.last_login_ip</code>.
     */
    public final TableField<AccountsRecord, String> LAST_LOGIN_IP = createField(DSL.name("last_login_ip"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.accounts.status</code>.
     */
    public final TableField<AccountsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.field("'active'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.accounts.initialized_at</code>.
     */
    public final TableField<AccountsRecord, LocalDateTime> INITIALIZED_AT = createField(DSL.name("initialized_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.accounts.created_at</code>.
     */
    public final TableField<AccountsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.accounts.updated_at</code>.
     */
    public final TableField<AccountsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.accounts.last_active_at</code>.
     */
    public final TableField<AccountsRecord, LocalDateTime> LAST_ACTIVE_AT = createField(DSL.name("last_active_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private Accounts(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.accounts</code> table reference
     */
    public Accounts(String alias) {
        this(DSL.name(alias), ACCOUNTS);
    }

    /**
     * Create an aliased <code>public.accounts</code> table reference
     */
    public Accounts(Name alias) {
        this(alias, ACCOUNTS);
    }

    /**
     * Create a <code>public.accounts</code> table reference
     */
    public Accounts() {
        this(DSL.name("accounts"), null);
    }

    public <O extends Record> Accounts(Table<O> child, ForeignKey<O, AccountsRecord> key) {
        super(child, key, ACCOUNTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_EMAIL_IDX);
    }

    @Override
    public UniqueKey<AccountsRecord> getPrimaryKey() {
        return Keys.ACCOUNT_PKEY;
    }

    @Override
    public List<UniqueKey<AccountsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsRecord>>asList(Keys.ACCOUNT_PKEY);
    }

    @Override
    public Accounts as(String alias) {
        return new Accounts(DSL.name(alias), this);
    }

    @Override
    public Accounts as(Name alias) {
        return new Accounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(String name) {
        return new Accounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Name name) {
        return new Accounts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<UUID, String, String, String, String, String, String, String, String, LocalDateTime, String, String, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
