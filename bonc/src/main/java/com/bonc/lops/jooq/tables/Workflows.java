/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.WorkflowsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Workflows extends TableImpl<WorkflowsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.workflows</code>
     */
    public static final Workflows WORKFLOWS = new Workflows();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowsRecord> getRecordType() {
        return WorkflowsRecord.class;
    }

    /**
     * The column <code>public.workflows.id</code>.
     */
    public final TableField<WorkflowsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.workflows.tenant_id</code>.
     */
    public final TableField<WorkflowsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflows.app_id</code>.
     */
    public final TableField<WorkflowsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflows.type</code>.
     */
    public final TableField<WorkflowsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflows.version</code>.
     */
    public final TableField<WorkflowsRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflows.graph</code>.
     */
    public final TableField<WorkflowsRecord, String> GRAPH = createField(DSL.name("graph"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.workflows.features</code>.
     */
    public final TableField<WorkflowsRecord, String> FEATURES = createField(DSL.name("features"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.workflows.created_by</code>.
     */
    public final TableField<WorkflowsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflows.created_at</code>.
     */
    public final TableField<WorkflowsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.workflows.updated_by</code>.
     */
    public final TableField<WorkflowsRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.workflows.updated_at</code>.
     */
    public final TableField<WorkflowsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Workflows(Name alias, Table<WorkflowsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Workflows(Name alias, Table<WorkflowsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.workflows</code> table reference
     */
    public Workflows(String alias) {
        this(DSL.name(alias), WORKFLOWS);
    }

    /**
     * Create an aliased <code>public.workflows</code> table reference
     */
    public Workflows(Name alias) {
        this(alias, WORKFLOWS);
    }

    /**
     * Create a <code>public.workflows</code> table reference
     */
    public Workflows() {
        this(DSL.name("workflows"), null);
    }

    public <O extends Record> Workflows(Table<O> child, ForeignKey<O, WorkflowsRecord> key) {
        super(child, key, WORKFLOWS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_VERSION_IDX);
    }

    @Override
    public UniqueKey<WorkflowsRecord> getPrimaryKey() {
        return Keys.WORKFLOW_PKEY;
    }

    @Override
    public List<UniqueKey<WorkflowsRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowsRecord>>asList(Keys.WORKFLOW_PKEY);
    }

    @Override
    public Workflows as(String alias) {
        return new Workflows(DSL.name(alias), this);
    }

    @Override
    public Workflows as(Name alias) {
        return new Workflows(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Workflows rename(String name) {
        return new Workflows(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workflows rename(Name name) {
        return new Workflows(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, UUID, UUID, String, String, String, String, UUID, LocalDateTime, UUID, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
