/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ToolPublishedAppsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ToolPublishedApps extends TableImpl<ToolPublishedAppsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tool_published_apps</code>
     */
    public static final ToolPublishedApps TOOL_PUBLISHED_APPS = new ToolPublishedApps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ToolPublishedAppsRecord> getRecordType() {
        return ToolPublishedAppsRecord.class;
    }

    /**
     * The column <code>public.tool_published_apps.id</code>.
     */
    public final TableField<ToolPublishedAppsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tool_published_apps.app_id</code>.
     */
    public final TableField<ToolPublishedAppsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_published_apps.user_id</code>.
     */
    public final TableField<ToolPublishedAppsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_published_apps.description</code>.
     */
    public final TableField<ToolPublishedAppsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tool_published_apps.llm_description</code>.
     */
    public final TableField<ToolPublishedAppsRecord, String> LLM_DESCRIPTION = createField(DSL.name("llm_description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tool_published_apps.query_description</code>.
     */
    public final TableField<ToolPublishedAppsRecord, String> QUERY_DESCRIPTION = createField(DSL.name("query_description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tool_published_apps.query_name</code>.
     */
    public final TableField<ToolPublishedAppsRecord, String> QUERY_NAME = createField(DSL.name("query_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tool_published_apps.tool_name</code>.
     */
    public final TableField<ToolPublishedAppsRecord, String> TOOL_NAME = createField(DSL.name("tool_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tool_published_apps.author</code>.
     */
    public final TableField<ToolPublishedAppsRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tool_published_apps.created_at</code>.
     */
    public final TableField<ToolPublishedAppsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tool_published_apps.updated_at</code>.
     */
    public final TableField<ToolPublishedAppsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private ToolPublishedApps(Name alias, Table<ToolPublishedAppsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ToolPublishedApps(Name alias, Table<ToolPublishedAppsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tool_published_apps</code> table reference
     */
    public ToolPublishedApps(String alias) {
        this(DSL.name(alias), TOOL_PUBLISHED_APPS);
    }

    /**
     * Create an aliased <code>public.tool_published_apps</code> table reference
     */
    public ToolPublishedApps(Name alias) {
        this(alias, TOOL_PUBLISHED_APPS);
    }

    /**
     * Create a <code>public.tool_published_apps</code> table reference
     */
    public ToolPublishedApps() {
        this(DSL.name("tool_published_apps"), null);
    }

    public <O extends Record> ToolPublishedApps(Table<O> child, ForeignKey<O, ToolPublishedAppsRecord> key) {
        super(child, key, TOOL_PUBLISHED_APPS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ToolPublishedAppsRecord> getPrimaryKey() {
        return Keys.PUBLISHED_APP_TOOL_PKEY;
    }

    @Override
    public List<UniqueKey<ToolPublishedAppsRecord>> getKeys() {
        return Arrays.<UniqueKey<ToolPublishedAppsRecord>>asList(Keys.PUBLISHED_APP_TOOL_PKEY, Keys.UNIQUE_PUBLISHED_APP_TOOL);
    }

    @Override
    public List<ForeignKey<ToolPublishedAppsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ToolPublishedAppsRecord, ?>>asList(Keys.TOOL_PUBLISHED_APPS__TOOL_PUBLISHED_APPS_APP_ID_FKEY);
    }

    private transient Apps _apps;

    public Apps apps() {
        if (_apps == null)
            _apps = new Apps(this, Keys.TOOL_PUBLISHED_APPS__TOOL_PUBLISHED_APPS_APP_ID_FKEY);

        return _apps;
    }

    @Override
    public ToolPublishedApps as(String alias) {
        return new ToolPublishedApps(DSL.name(alias), this);
    }

    @Override
    public ToolPublishedApps as(Name alias) {
        return new ToolPublishedApps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolPublishedApps rename(String name) {
        return new ToolPublishedApps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolPublishedApps rename(Name name) {
        return new ToolPublishedApps(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, UUID, UUID, String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
