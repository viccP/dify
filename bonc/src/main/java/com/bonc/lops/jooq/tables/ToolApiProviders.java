/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ToolApiProvidersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ToolApiProviders extends TableImpl<ToolApiProvidersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tool_api_providers</code>
     */
    public static final ToolApiProviders TOOL_API_PROVIDERS = new ToolApiProviders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ToolApiProvidersRecord> getRecordType() {
        return ToolApiProvidersRecord.class;
    }

    /**
     * The column <code>public.tool_api_providers.id</code>.
     */
    public final TableField<ToolApiProvidersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tool_api_providers.name</code>.
     */
    public final TableField<ToolApiProvidersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.schema</code>.
     */
    public final TableField<ToolApiProvidersRecord, String> SCHEMA = createField(DSL.name("schema"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.schema_type_str</code>.
     */
    public final TableField<ToolApiProvidersRecord, String> SCHEMA_TYPE_STR = createField(DSL.name("schema_type_str"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.user_id</code>.
     */
    public final TableField<ToolApiProvidersRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.tenant_id</code>.
     */
    public final TableField<ToolApiProvidersRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.tools_str</code>.
     */
    public final TableField<ToolApiProvidersRecord, String> TOOLS_STR = createField(DSL.name("tools_str"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.icon</code>.
     */
    public final TableField<ToolApiProvidersRecord, String> ICON = createField(DSL.name("icon"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.credentials_str</code>.
     */
    public final TableField<ToolApiProvidersRecord, String> CREDENTIALS_STR = createField(DSL.name("credentials_str"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.description</code>.
     */
    public final TableField<ToolApiProvidersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tool_api_providers.created_at</code>.
     */
    public final TableField<ToolApiProvidersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tool_api_providers.updated_at</code>.
     */
    public final TableField<ToolApiProvidersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tool_api_providers.privacy_policy</code>.
     */
    public final TableField<ToolApiProvidersRecord, String> PRIVACY_POLICY = createField(DSL.name("privacy_policy"), SQLDataType.VARCHAR(255), this, "");

    private ToolApiProviders(Name alias, Table<ToolApiProvidersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ToolApiProviders(Name alias, Table<ToolApiProvidersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tool_api_providers</code> table reference
     */
    public ToolApiProviders(String alias) {
        this(DSL.name(alias), TOOL_API_PROVIDERS);
    }

    /**
     * Create an aliased <code>public.tool_api_providers</code> table reference
     */
    public ToolApiProviders(Name alias) {
        this(alias, TOOL_API_PROVIDERS);
    }

    /**
     * Create a <code>public.tool_api_providers</code> table reference
     */
    public ToolApiProviders() {
        this(DSL.name("tool_api_providers"), null);
    }

    public <O extends Record> ToolApiProviders(Table<O> child, ForeignKey<O, ToolApiProvidersRecord> key) {
        super(child, key, TOOL_API_PROVIDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ToolApiProvidersRecord> getPrimaryKey() {
        return Keys.TOOL_API_PROVIDER_PKEY;
    }

    @Override
    public List<UniqueKey<ToolApiProvidersRecord>> getKeys() {
        return Arrays.<UniqueKey<ToolApiProvidersRecord>>asList(Keys.TOOL_API_PROVIDER_PKEY, Keys.UNIQUE_API_TOOL_PROVIDER);
    }

    @Override
    public ToolApiProviders as(String alias) {
        return new ToolApiProviders(DSL.name(alias), this);
    }

    @Override
    public ToolApiProviders as(Name alias) {
        return new ToolApiProviders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolApiProviders rename(String name) {
        return new ToolApiProviders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolApiProviders rename(Name name) {
        return new ToolApiProviders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, String, String, String, UUID, UUID, String, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
