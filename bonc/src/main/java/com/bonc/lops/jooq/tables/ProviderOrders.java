/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ProviderOrdersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProviderOrders extends TableImpl<ProviderOrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.provider_orders</code>
     */
    public static final ProviderOrders PROVIDER_ORDERS = new ProviderOrders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProviderOrdersRecord> getRecordType() {
        return ProviderOrdersRecord.class;
    }

    /**
     * The column <code>public.provider_orders.id</code>.
     */
    public final TableField<ProviderOrdersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.provider_orders.tenant_id</code>.
     */
    public final TableField<ProviderOrdersRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.provider_orders.provider_name</code>.
     */
    public final TableField<ProviderOrdersRecord, String> PROVIDER_NAME = createField(DSL.name("provider_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.provider_orders.account_id</code>.
     */
    public final TableField<ProviderOrdersRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.provider_orders.payment_product_id</code>.
     */
    public final TableField<ProviderOrdersRecord, String> PAYMENT_PRODUCT_ID = createField(DSL.name("payment_product_id"), SQLDataType.VARCHAR(191).nullable(false), this, "");

    /**
     * The column <code>public.provider_orders.payment_id</code>.
     */
    public final TableField<ProviderOrdersRecord, String> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.VARCHAR(191), this, "");

    /**
     * The column <code>public.provider_orders.transaction_id</code>.
     */
    public final TableField<ProviderOrdersRecord, String> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.VARCHAR(191), this, "");

    /**
     * The column <code>public.provider_orders.quantity</code>.
     */
    public final TableField<ProviderOrdersRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.provider_orders.currency</code>.
     */
    public final TableField<ProviderOrdersRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.provider_orders.total_amount</code>.
     */
    public final TableField<ProviderOrdersRecord, Integer> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.provider_orders.payment_status</code>.
     */
    public final TableField<ProviderOrdersRecord, String> PAYMENT_STATUS = createField(DSL.name("payment_status"), SQLDataType.VARCHAR(40).nullable(false).defaultValue(DSL.field("'wait_pay'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.provider_orders.paid_at</code>.
     */
    public final TableField<ProviderOrdersRecord, LocalDateTime> PAID_AT = createField(DSL.name("paid_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.provider_orders.pay_failed_at</code>.
     */
    public final TableField<ProviderOrdersRecord, LocalDateTime> PAY_FAILED_AT = createField(DSL.name("pay_failed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.provider_orders.refunded_at</code>.
     */
    public final TableField<ProviderOrdersRecord, LocalDateTime> REFUNDED_AT = createField(DSL.name("refunded_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.provider_orders.created_at</code>.
     */
    public final TableField<ProviderOrdersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.provider_orders.updated_at</code>.
     */
    public final TableField<ProviderOrdersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private ProviderOrders(Name alias, Table<ProviderOrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProviderOrders(Name alias, Table<ProviderOrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.provider_orders</code> table reference
     */
    public ProviderOrders(String alias) {
        this(DSL.name(alias), PROVIDER_ORDERS);
    }

    /**
     * Create an aliased <code>public.provider_orders</code> table reference
     */
    public ProviderOrders(Name alias) {
        this(alias, PROVIDER_ORDERS);
    }

    /**
     * Create a <code>public.provider_orders</code> table reference
     */
    public ProviderOrders() {
        this(DSL.name("provider_orders"), null);
    }

    public <O extends Record> ProviderOrders(Table<O> child, ForeignKey<O, ProviderOrdersRecord> key) {
        super(child, key, PROVIDER_ORDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROVIDER_ORDER_TENANT_PROVIDER_IDX);
    }

    @Override
    public UniqueKey<ProviderOrdersRecord> getPrimaryKey() {
        return Keys.PROVIDER_ORDER_PKEY;
    }

    @Override
    public List<UniqueKey<ProviderOrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<ProviderOrdersRecord>>asList(Keys.PROVIDER_ORDER_PKEY);
    }

    @Override
    public ProviderOrders as(String alias) {
        return new ProviderOrders(DSL.name(alias), this);
    }

    @Override
    public ProviderOrders as(Name alias) {
        return new ProviderOrders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProviderOrders rename(String name) {
        return new ProviderOrders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProviderOrders rename(Name name) {
        return new ProviderOrders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<UUID, UUID, String, UUID, String, String, String, Integer, String, Integer, String, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
