/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DatasetsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datasets extends TableImpl<DatasetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.datasets</code>
     */
    public static final Datasets DATASETS = new Datasets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetsRecord> getRecordType() {
        return DatasetsRecord.class;
    }

    /**
     * The column <code>public.datasets.id</code>.
     */
    public final TableField<DatasetsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.datasets.tenant_id</code>.
     */
    public final TableField<DatasetsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.datasets.name</code>.
     */
    public final TableField<DatasetsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.datasets.description</code>.
     */
    public final TableField<DatasetsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.datasets.provider</code>.
     */
    public final TableField<DatasetsRecord, String> PROVIDER = createField(DSL.name("provider"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'vendor'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.datasets.permission</code>.
     */
    public final TableField<DatasetsRecord, String> PERMISSION = createField(DSL.name("permission"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'only_me'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.datasets.data_source_type</code>.
     */
    public final TableField<DatasetsRecord, String> DATA_SOURCE_TYPE = createField(DSL.name("data_source_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.datasets.indexing_technique</code>.
     */
    public final TableField<DatasetsRecord, String> INDEXING_TECHNIQUE = createField(DSL.name("indexing_technique"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.datasets.index_struct</code>.
     */
    public final TableField<DatasetsRecord, String> INDEX_STRUCT = createField(DSL.name("index_struct"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.datasets.created_by</code>.
     */
    public final TableField<DatasetsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.datasets.created_at</code>.
     */
    public final TableField<DatasetsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.datasets.updated_by</code>.
     */
    public final TableField<DatasetsRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.datasets.updated_at</code>.
     */
    public final TableField<DatasetsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.datasets.embedding_model</code>.
     */
    public final TableField<DatasetsRecord, String> EMBEDDING_MODEL = createField(DSL.name("embedding_model"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("'text-embedding-ada-002'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.datasets.embedding_model_provider</code>.
     */
    public final TableField<DatasetsRecord, String> EMBEDDING_MODEL_PROVIDER = createField(DSL.name("embedding_model_provider"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("'openai'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.datasets.collection_binding_id</code>.
     */
    public final TableField<DatasetsRecord, UUID> COLLECTION_BINDING_ID = createField(DSL.name("collection_binding_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.datasets.retrieval_model</code>.
     */
    public final TableField<DatasetsRecord, JSONB> RETRIEVAL_MODEL = createField(DSL.name("retrieval_model"), SQLDataType.JSONB, this, "");

    private Datasets(Name alias, Table<DatasetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Datasets(Name alias, Table<DatasetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.datasets</code> table reference
     */
    public Datasets(String alias) {
        this(DSL.name(alias), DATASETS);
    }

    /**
     * Create an aliased <code>public.datasets</code> table reference
     */
    public Datasets(Name alias) {
        this(alias, DATASETS);
    }

    /**
     * Create a <code>public.datasets</code> table reference
     */
    public Datasets() {
        this(DSL.name("datasets"), null);
    }

    public <O extends Record> Datasets(Table<O> child, ForeignKey<O, DatasetsRecord> key) {
        super(child, key, DATASETS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATASET_TENANT_IDX, Indexes.RETRIEVAL_MODEL_IDX);
    }

    @Override
    public UniqueKey<DatasetsRecord> getPrimaryKey() {
        return Keys.DATASET_PKEY;
    }

    @Override
    public List<UniqueKey<DatasetsRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetsRecord>>asList(Keys.DATASET_PKEY);
    }

    @Override
    public Datasets as(String alias) {
        return new Datasets(DSL.name(alias), this);
    }

    @Override
    public Datasets as(Name alias) {
        return new Datasets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasets rename(String name) {
        return new Datasets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasets rename(Name name) {
        return new Datasets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<UUID, UUID, String, String, String, String, String, String, String, UUID, LocalDateTime, UUID, LocalDateTime, String, String, UUID, JSONB> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
