/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DocumentsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Documents extends TableImpl<DocumentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.documents</code>
     */
    public static final Documents DOCUMENTS = new Documents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentsRecord> getRecordType() {
        return DocumentsRecord.class;
    }

    /**
     * The column <code>public.documents.id</code>.
     */
    public final TableField<DocumentsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.documents.tenant_id</code>.
     */
    public final TableField<DocumentsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.documents.dataset_id</code>.
     */
    public final TableField<DocumentsRecord, UUID> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.documents.position</code>.
     */
    public final TableField<DocumentsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.documents.data_source_type</code>.
     */
    public final TableField<DocumentsRecord, String> DATA_SOURCE_TYPE = createField(DSL.name("data_source_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.documents.data_source_info</code>.
     */
    public final TableField<DocumentsRecord, String> DATA_SOURCE_INFO = createField(DSL.name("data_source_info"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.documents.dataset_process_rule_id</code>.
     */
    public final TableField<DocumentsRecord, UUID> DATASET_PROCESS_RULE_ID = createField(DSL.name("dataset_process_rule_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.documents.batch</code>.
     */
    public final TableField<DocumentsRecord, String> BATCH = createField(DSL.name("batch"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.documents.name</code>.
     */
    public final TableField<DocumentsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.documents.created_from</code>.
     */
    public final TableField<DocumentsRecord, String> CREATED_FROM = createField(DSL.name("created_from"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.documents.created_by</code>.
     */
    public final TableField<DocumentsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.documents.created_api_request_id</code>.
     */
    public final TableField<DocumentsRecord, UUID> CREATED_API_REQUEST_ID = createField(DSL.name("created_api_request_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.documents.created_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.documents.processing_started_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> PROCESSING_STARTED_AT = createField(DSL.name("processing_started_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.file_id</code>.
     */
    public final TableField<DocumentsRecord, String> FILE_ID = createField(DSL.name("file_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.documents.word_count</code>.
     */
    public final TableField<DocumentsRecord, Integer> WORD_COUNT = createField(DSL.name("word_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.documents.parsing_completed_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> PARSING_COMPLETED_AT = createField(DSL.name("parsing_completed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.cleaning_completed_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> CLEANING_COMPLETED_AT = createField(DSL.name("cleaning_completed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.splitting_completed_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> SPLITTING_COMPLETED_AT = createField(DSL.name("splitting_completed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.tokens</code>.
     */
    public final TableField<DocumentsRecord, Integer> TOKENS = createField(DSL.name("tokens"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.documents.indexing_latency</code>.
     */
    public final TableField<DocumentsRecord, Double> INDEXING_LATENCY = createField(DSL.name("indexing_latency"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.documents.completed_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.is_paused</code>.
     */
    public final TableField<DocumentsRecord, Boolean> IS_PAUSED = createField(DSL.name("is_paused"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.documents.paused_by</code>.
     */
    public final TableField<DocumentsRecord, UUID> PAUSED_BY = createField(DSL.name("paused_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.documents.paused_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> PAUSED_AT = createField(DSL.name("paused_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.error</code>.
     */
    public final TableField<DocumentsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.documents.stopped_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> STOPPED_AT = createField(DSL.name("stopped_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.indexing_status</code>.
     */
    public final TableField<DocumentsRecord, String> INDEXING_STATUS = createField(DSL.name("indexing_status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'waiting'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.documents.enabled</code>.
     */
    public final TableField<DocumentsRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.documents.disabled_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> DISABLED_AT = createField(DSL.name("disabled_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.disabled_by</code>.
     */
    public final TableField<DocumentsRecord, UUID> DISABLED_BY = createField(DSL.name("disabled_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.documents.archived</code>.
     */
    public final TableField<DocumentsRecord, Boolean> ARCHIVED = createField(DSL.name("archived"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.documents.archived_reason</code>.
     */
    public final TableField<DocumentsRecord, String> ARCHIVED_REASON = createField(DSL.name("archived_reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.documents.archived_by</code>.
     */
    public final TableField<DocumentsRecord, UUID> ARCHIVED_BY = createField(DSL.name("archived_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.documents.archived_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> ARCHIVED_AT = createField(DSL.name("archived_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.documents.updated_at</code>.
     */
    public final TableField<DocumentsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.documents.doc_type</code>.
     */
    public final TableField<DocumentsRecord, String> DOC_TYPE = createField(DSL.name("doc_type"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.documents.doc_metadata</code>.
     */
    public final TableField<DocumentsRecord, JSON> DOC_METADATA = createField(DSL.name("doc_metadata"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.documents.doc_form</code>.
     */
    public final TableField<DocumentsRecord, String> DOC_FORM = createField(DSL.name("doc_form"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'text_model'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.documents.doc_language</code>.
     */
    public final TableField<DocumentsRecord, String> DOC_LANGUAGE = createField(DSL.name("doc_language"), SQLDataType.VARCHAR(255), this, "");

    private Documents(Name alias, Table<DocumentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Documents(Name alias, Table<DocumentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.documents</code> table reference
     */
    public Documents(String alias) {
        this(DSL.name(alias), DOCUMENTS);
    }

    /**
     * Create an aliased <code>public.documents</code> table reference
     */
    public Documents(Name alias) {
        this(alias, DOCUMENTS);
    }

    /**
     * Create a <code>public.documents</code> table reference
     */
    public Documents() {
        this(DSL.name("documents"), null);
    }

    public <O extends Record> Documents(Table<O> child, ForeignKey<O, DocumentsRecord> key) {
        super(child, key, DOCUMENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCUMENT_DATASET_ID_IDX, Indexes.DOCUMENT_IS_PAUSED_IDX, Indexes.DOCUMENT_TENANT_IDX);
    }

    @Override
    public UniqueKey<DocumentsRecord> getPrimaryKey() {
        return Keys.DOCUMENT_PKEY;
    }

    @Override
    public List<UniqueKey<DocumentsRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentsRecord>>asList(Keys.DOCUMENT_PKEY);
    }

    @Override
    public Documents as(String alias) {
        return new Documents(DSL.name(alias), this);
    }

    @Override
    public Documents as(Name alias) {
        return new Documents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Documents rename(String name) {
        return new Documents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Documents rename(Name name) {
        return new Documents(name, null);
    }
}
