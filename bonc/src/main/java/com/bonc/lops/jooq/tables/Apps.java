/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.AppsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apps extends TableImpl<AppsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.apps</code>
     */
    public static final Apps APPS = new Apps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppsRecord> getRecordType() {
        return AppsRecord.class;
    }

    /**
     * The column <code>public.apps.id</code>.
     */
    public final TableField<AppsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.apps.tenant_id</code>.
     */
    public final TableField<AppsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.apps.name</code>.
     */
    public final TableField<AppsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.apps.mode</code>.
     */
    public final TableField<AppsRecord, String> MODE = createField(DSL.name("mode"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.apps.icon</code>.
     */
    public final TableField<AppsRecord, String> ICON = createField(DSL.name("icon"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.apps.icon_background</code>.
     */
    public final TableField<AppsRecord, String> ICON_BACKGROUND = createField(DSL.name("icon_background"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.apps.app_model_config_id</code>.
     */
    public final TableField<AppsRecord, UUID> APP_MODEL_CONFIG_ID = createField(DSL.name("app_model_config_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.apps.status</code>.
     */
    public final TableField<AppsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'normal'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.apps.enable_site</code>.
     */
    public final TableField<AppsRecord, Boolean> ENABLE_SITE = createField(DSL.name("enable_site"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.apps.enable_api</code>.
     */
    public final TableField<AppsRecord, Boolean> ENABLE_API = createField(DSL.name("enable_api"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.apps.api_rpm</code>.
     */
    public final TableField<AppsRecord, Integer> API_RPM = createField(DSL.name("api_rpm"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.apps.api_rph</code>.
     */
    public final TableField<AppsRecord, Integer> API_RPH = createField(DSL.name("api_rph"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.apps.is_demo</code>.
     */
    public final TableField<AppsRecord, Boolean> IS_DEMO = createField(DSL.name("is_demo"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.apps.is_public</code>.
     */
    public final TableField<AppsRecord, Boolean> IS_PUBLIC = createField(DSL.name("is_public"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.apps.created_at</code>.
     */
    public final TableField<AppsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.apps.updated_at</code>.
     */
    public final TableField<AppsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.apps.is_universal</code>.
     */
    public final TableField<AppsRecord, Boolean> IS_UNIVERSAL = createField(DSL.name("is_universal"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.apps.workflow_id</code>.
     */
    public final TableField<AppsRecord, UUID> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.apps.description</code>.
     */
    public final TableField<AppsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.CLOB)), this, "");

    private Apps(Name alias, Table<AppsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apps(Name alias, Table<AppsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.apps</code> table reference
     */
    public Apps(String alias) {
        this(DSL.name(alias), APPS);
    }

    /**
     * Create an aliased <code>public.apps</code> table reference
     */
    public Apps(Name alias) {
        this(alias, APPS);
    }

    /**
     * Create a <code>public.apps</code> table reference
     */
    public Apps() {
        this(DSL.name("apps"), null);
    }

    public <O extends Record> Apps(Table<O> child, ForeignKey<O, AppsRecord> key) {
        super(child, key, APPS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APP_TENANT_ID_IDX);
    }

    @Override
    public UniqueKey<AppsRecord> getPrimaryKey() {
        return Keys.APP_PKEY;
    }

    @Override
    public List<UniqueKey<AppsRecord>> getKeys() {
        return Arrays.<UniqueKey<AppsRecord>>asList(Keys.APP_PKEY);
    }

    @Override
    public Apps as(String alias) {
        return new Apps(DSL.name(alias), this);
    }

    @Override
    public Apps as(Name alias) {
        return new Apps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apps rename(String name) {
        return new Apps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apps rename(Name name) {
        return new Apps(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<UUID, UUID, String, String, String, String, UUID, String, Boolean, Boolean, Integer, Integer, Boolean, Boolean, LocalDateTime, LocalDateTime, Boolean, UUID, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
