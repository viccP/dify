/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.AlembicVersion;
import com.bonc.lops.jooq.tables.records.AlembicVersionRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AlembicVersionDao extends DAOImpl<AlembicVersionRecord, com.bonc.lops.jooq.tables.pojos.AlembicVersion, String> {

    /**
     * Create a new AlembicVersionDao without any configuration
     */
    public AlembicVersionDao() {
        super(AlembicVersion.ALEMBIC_VERSION, com.bonc.lops.jooq.tables.pojos.AlembicVersion.class);
    }

    /**
     * Create a new AlembicVersionDao with an attached configuration
     */
    @Autowired
    public AlembicVersionDao(Configuration configuration) {
        super(AlembicVersion.ALEMBIC_VERSION, com.bonc.lops.jooq.tables.pojos.AlembicVersion.class, configuration);
    }

    @Override
    public String getId(com.bonc.lops.jooq.tables.pojos.AlembicVersion object) {
        return object.getVersionNum();
    }

    /**
     * Fetch records that have <code>version_num BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AlembicVersion> fetchRangeOfVersionNum(String lowerInclusive, String upperInclusive) {
        return fetchRange(AlembicVersion.ALEMBIC_VERSION.VERSION_NUM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version_num IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AlembicVersion> fetchByVersionNum(String... values) {
        return fetch(AlembicVersion.ALEMBIC_VERSION.VERSION_NUM, values);
    }

    /**
     * Fetch a unique record that has <code>version_num = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.AlembicVersion fetchOneByVersionNum(String value) {
        return fetchOne(AlembicVersion.ALEMBIC_VERSION.VERSION_NUM, value);
    }
}
