/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.MessagesRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Messages extends TableImpl<MessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.messages</code>
     */
    public static final Messages MESSAGES = new Messages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessagesRecord> getRecordType() {
        return MessagesRecord.class;
    }

    /**
     * The column <code>public.messages.id</code>.
     */
    public final TableField<MessagesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.messages.app_id</code>.
     */
    public final TableField<MessagesRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.messages.model_provider</code>.
     */
    public final TableField<MessagesRecord, String> MODEL_PROVIDER = createField(DSL.name("model_provider"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.messages.model_id</code>.
     */
    public final TableField<MessagesRecord, String> MODEL_ID = createField(DSL.name("model_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.messages.override_model_configs</code>.
     */
    public final TableField<MessagesRecord, String> OVERRIDE_MODEL_CONFIGS = createField(DSL.name("override_model_configs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.messages.conversation_id</code>.
     */
    public final TableField<MessagesRecord, UUID> CONVERSATION_ID = createField(DSL.name("conversation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.messages.inputs</code>.
     */
    public final TableField<MessagesRecord, JSON> INPUTS = createField(DSL.name("inputs"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.messages.query</code>.
     */
    public final TableField<MessagesRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.messages.message</code>.
     */
    public final TableField<MessagesRecord, JSON> MESSAGE = createField(DSL.name("message"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>public.messages.message_tokens</code>.
     */
    public final TableField<MessagesRecord, Integer> MESSAGE_TOKENS = createField(DSL.name("message_tokens"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.messages.message_unit_price</code>.
     */
    public final TableField<MessagesRecord, BigDecimal> MESSAGE_UNIT_PRICE = createField(DSL.name("message_unit_price"), SQLDataType.NUMERIC(10, 4).nullable(false), this, "");

    /**
     * The column <code>public.messages.answer</code>.
     */
    public final TableField<MessagesRecord, String> ANSWER = createField(DSL.name("answer"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.messages.answer_tokens</code>.
     */
    public final TableField<MessagesRecord, Integer> ANSWER_TOKENS = createField(DSL.name("answer_tokens"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.messages.answer_unit_price</code>.
     */
    public final TableField<MessagesRecord, BigDecimal> ANSWER_UNIT_PRICE = createField(DSL.name("answer_unit_price"), SQLDataType.NUMERIC(10, 4).nullable(false), this, "");

    /**
     * The column <code>public.messages.provider_response_latency</code>.
     */
    public final TableField<MessagesRecord, Double> PROVIDER_RESPONSE_LATENCY = createField(DSL.name("provider_response_latency"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.messages.total_price</code>.
     */
    public final TableField<MessagesRecord, BigDecimal> TOTAL_PRICE = createField(DSL.name("total_price"), SQLDataType.NUMERIC(10, 7), this, "");

    /**
     * The column <code>public.messages.currency</code>.
     */
    public final TableField<MessagesRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.messages.from_source</code>.
     */
    public final TableField<MessagesRecord, String> FROM_SOURCE = createField(DSL.name("from_source"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.messages.from_end_user_id</code>.
     */
    public final TableField<MessagesRecord, UUID> FROM_END_USER_ID = createField(DSL.name("from_end_user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.messages.from_account_id</code>.
     */
    public final TableField<MessagesRecord, UUID> FROM_ACCOUNT_ID = createField(DSL.name("from_account_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.messages.created_at</code>.
     */
    public final TableField<MessagesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.messages.updated_at</code>.
     */
    public final TableField<MessagesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.messages.agent_based</code>.
     */
    public final TableField<MessagesRecord, Boolean> AGENT_BASED = createField(DSL.name("agent_based"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.messages.message_price_unit</code>.
     */
    public final TableField<MessagesRecord, BigDecimal> MESSAGE_PRICE_UNIT = createField(DSL.name("message_price_unit"), SQLDataType.NUMERIC(10, 7).nullable(false).defaultValue(DSL.field("0.001", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.messages.answer_price_unit</code>.
     */
    public final TableField<MessagesRecord, BigDecimal> ANSWER_PRICE_UNIT = createField(DSL.name("answer_price_unit"), SQLDataType.NUMERIC(10, 7).nullable(false).defaultValue(DSL.field("0.001", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.messages.workflow_run_id</code>.
     */
    public final TableField<MessagesRecord, UUID> WORKFLOW_RUN_ID = createField(DSL.name("workflow_run_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.messages.status</code>.
     */
    public final TableField<MessagesRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'normal'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.messages.error</code>.
     */
    public final TableField<MessagesRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.messages.message_metadata</code>.
     */
    public final TableField<MessagesRecord, String> MESSAGE_METADATA = createField(DSL.name("message_metadata"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.messages.invoke_from</code>.
     */
    public final TableField<MessagesRecord, String> INVOKE_FROM = createField(DSL.name("invoke_from"), SQLDataType.VARCHAR(255), this, "");

    private Messages(Name alias, Table<MessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Messages(Name alias, Table<MessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.messages</code> table reference
     */
    public Messages(String alias) {
        this(DSL.name(alias), MESSAGES);
    }

    /**
     * Create an aliased <code>public.messages</code> table reference
     */
    public Messages(Name alias) {
        this(alias, MESSAGES);
    }

    /**
     * Create a <code>public.messages</code> table reference
     */
    public Messages() {
        this(DSL.name("messages"), null);
    }

    public <O extends Record> Messages(Table<O> child, ForeignKey<O, MessagesRecord> key) {
        super(child, key, MESSAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_ACCOUNT_IDX, Indexes.MESSAGE_APP_ID_IDX, Indexes.MESSAGE_CONVERSATION_ID_IDX, Indexes.MESSAGE_END_USER_IDX);
    }

    @Override
    public UniqueKey<MessagesRecord> getPrimaryKey() {
        return Keys.MESSAGE_PKEY;
    }

    @Override
    public List<UniqueKey<MessagesRecord>> getKeys() {
        return Arrays.<UniqueKey<MessagesRecord>>asList(Keys.MESSAGE_PKEY);
    }

    @Override
    public Messages as(String alias) {
        return new Messages(DSL.name(alias), this);
    }

    @Override
    public Messages as(Name alias) {
        return new Messages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(String name) {
        return new Messages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(Name name) {
        return new Messages(name, null);
    }
}
