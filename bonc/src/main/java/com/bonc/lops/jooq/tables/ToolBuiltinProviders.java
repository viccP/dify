/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ToolBuiltinProvidersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ToolBuiltinProviders extends TableImpl<ToolBuiltinProvidersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tool_builtin_providers</code>
     */
    public static final ToolBuiltinProviders TOOL_BUILTIN_PROVIDERS = new ToolBuiltinProviders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ToolBuiltinProvidersRecord> getRecordType() {
        return ToolBuiltinProvidersRecord.class;
    }

    /**
     * The column <code>public.tool_builtin_providers.id</code>.
     */
    public final TableField<ToolBuiltinProvidersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tool_builtin_providers.tenant_id</code>.
     */
    public final TableField<ToolBuiltinProvidersRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.tool_builtin_providers.user_id</code>.
     */
    public final TableField<ToolBuiltinProvidersRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_builtin_providers.provider</code>.
     */
    public final TableField<ToolBuiltinProvidersRecord, String> PROVIDER = createField(DSL.name("provider"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tool_builtin_providers.encrypted_credentials</code>.
     */
    public final TableField<ToolBuiltinProvidersRecord, String> ENCRYPTED_CREDENTIALS = createField(DSL.name("encrypted_credentials"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tool_builtin_providers.created_at</code>.
     */
    public final TableField<ToolBuiltinProvidersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tool_builtin_providers.updated_at</code>.
     */
    public final TableField<ToolBuiltinProvidersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private ToolBuiltinProviders(Name alias, Table<ToolBuiltinProvidersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ToolBuiltinProviders(Name alias, Table<ToolBuiltinProvidersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tool_builtin_providers</code> table reference
     */
    public ToolBuiltinProviders(String alias) {
        this(DSL.name(alias), TOOL_BUILTIN_PROVIDERS);
    }

    /**
     * Create an aliased <code>public.tool_builtin_providers</code> table reference
     */
    public ToolBuiltinProviders(Name alias) {
        this(alias, TOOL_BUILTIN_PROVIDERS);
    }

    /**
     * Create a <code>public.tool_builtin_providers</code> table reference
     */
    public ToolBuiltinProviders() {
        this(DSL.name("tool_builtin_providers"), null);
    }

    public <O extends Record> ToolBuiltinProviders(Table<O> child, ForeignKey<O, ToolBuiltinProvidersRecord> key) {
        super(child, key, TOOL_BUILTIN_PROVIDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ToolBuiltinProvidersRecord> getPrimaryKey() {
        return Keys.TOOL_BUILTIN_PROVIDER_PKEY;
    }

    @Override
    public List<UniqueKey<ToolBuiltinProvidersRecord>> getKeys() {
        return Arrays.<UniqueKey<ToolBuiltinProvidersRecord>>asList(Keys.TOOL_BUILTIN_PROVIDER_PKEY, Keys.UNIQUE_BUILTIN_TOOL_PROVIDER);
    }

    @Override
    public ToolBuiltinProviders as(String alias) {
        return new ToolBuiltinProviders(DSL.name(alias), this);
    }

    @Override
    public ToolBuiltinProviders as(Name alias) {
        return new ToolBuiltinProviders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolBuiltinProviders rename(String name) {
        return new ToolBuiltinProviders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolBuiltinProviders rename(Name name) {
        return new ToolBuiltinProviders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
