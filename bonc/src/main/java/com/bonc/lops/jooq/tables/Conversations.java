/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ConversationsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conversations extends TableImpl<ConversationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.conversations</code>
     */
    public static final Conversations CONVERSATIONS = new Conversations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConversationsRecord> getRecordType() {
        return ConversationsRecord.class;
    }

    /**
     * The column <code>public.conversations.id</code>.
     */
    public final TableField<ConversationsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.conversations.app_id</code>.
     */
    public final TableField<ConversationsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.conversations.app_model_config_id</code>.
     */
    public final TableField<ConversationsRecord, UUID> APP_MODEL_CONFIG_ID = createField(DSL.name("app_model_config_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.conversations.model_provider</code>.
     */
    public final TableField<ConversationsRecord, String> MODEL_PROVIDER = createField(DSL.name("model_provider"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.conversations.override_model_configs</code>.
     */
    public final TableField<ConversationsRecord, String> OVERRIDE_MODEL_CONFIGS = createField(DSL.name("override_model_configs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.conversations.model_id</code>.
     */
    public final TableField<ConversationsRecord, String> MODEL_ID = createField(DSL.name("model_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.conversations.mode</code>.
     */
    public final TableField<ConversationsRecord, String> MODE = createField(DSL.name("mode"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.conversations.name</code>.
     */
    public final TableField<ConversationsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.conversations.summary</code>.
     */
    public final TableField<ConversationsRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.conversations.inputs</code>.
     */
    public final TableField<ConversationsRecord, JSON> INPUTS = createField(DSL.name("inputs"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.conversations.introduction</code>.
     */
    public final TableField<ConversationsRecord, String> INTRODUCTION = createField(DSL.name("introduction"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.conversations.system_instruction</code>.
     */
    public final TableField<ConversationsRecord, String> SYSTEM_INSTRUCTION = createField(DSL.name("system_instruction"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.conversations.system_instruction_tokens</code>.
     */
    public final TableField<ConversationsRecord, Integer> SYSTEM_INSTRUCTION_TOKENS = createField(DSL.name("system_instruction_tokens"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.conversations.status</code>.
     */
    public final TableField<ConversationsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.conversations.from_source</code>.
     */
    public final TableField<ConversationsRecord, String> FROM_SOURCE = createField(DSL.name("from_source"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.conversations.from_end_user_id</code>.
     */
    public final TableField<ConversationsRecord, UUID> FROM_END_USER_ID = createField(DSL.name("from_end_user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.conversations.from_account_id</code>.
     */
    public final TableField<ConversationsRecord, UUID> FROM_ACCOUNT_ID = createField(DSL.name("from_account_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.conversations.read_at</code>.
     */
    public final TableField<ConversationsRecord, LocalDateTime> READ_AT = createField(DSL.name("read_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.conversations.read_account_id</code>.
     */
    public final TableField<ConversationsRecord, UUID> READ_ACCOUNT_ID = createField(DSL.name("read_account_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.conversations.created_at</code>.
     */
    public final TableField<ConversationsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.conversations.updated_at</code>.
     */
    public final TableField<ConversationsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.conversations.is_deleted</code>.
     */
    public final TableField<ConversationsRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.conversations.invoke_from</code>.
     */
    public final TableField<ConversationsRecord, String> INVOKE_FROM = createField(DSL.name("invoke_from"), SQLDataType.VARCHAR(255), this, "");

    private Conversations(Name alias, Table<ConversationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conversations(Name alias, Table<ConversationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.conversations</code> table reference
     */
    public Conversations(String alias) {
        this(DSL.name(alias), CONVERSATIONS);
    }

    /**
     * Create an aliased <code>public.conversations</code> table reference
     */
    public Conversations(Name alias) {
        this(alias, CONVERSATIONS);
    }

    /**
     * Create a <code>public.conversations</code> table reference
     */
    public Conversations() {
        this(DSL.name("conversations"), null);
    }

    public <O extends Record> Conversations(Table<O> child, ForeignKey<O, ConversationsRecord> key) {
        super(child, key, CONVERSATIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONVERSATION_APP_FROM_USER_IDX);
    }

    @Override
    public UniqueKey<ConversationsRecord> getPrimaryKey() {
        return Keys.CONVERSATION_PKEY;
    }

    @Override
    public List<UniqueKey<ConversationsRecord>> getKeys() {
        return Arrays.<UniqueKey<ConversationsRecord>>asList(Keys.CONVERSATION_PKEY);
    }

    @Override
    public Conversations as(String alias) {
        return new Conversations(DSL.name(alias), this);
    }

    @Override
    public Conversations as(Name alias) {
        return new Conversations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversations rename(String name) {
        return new Conversations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversations rename(Name name) {
        return new Conversations(name, null);
    }
}
