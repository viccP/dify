/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ApiRequestsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiRequests extends TableImpl<ApiRequestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.api_requests</code>
     */
    public static final ApiRequests API_REQUESTS = new ApiRequests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiRequestsRecord> getRecordType() {
        return ApiRequestsRecord.class;
    }

    /**
     * The column <code>public.api_requests.id</code>.
     */
    public final TableField<ApiRequestsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.api_requests.tenant_id</code>.
     */
    public final TableField<ApiRequestsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.api_requests.api_token_id</code>.
     */
    public final TableField<ApiRequestsRecord, UUID> API_TOKEN_ID = createField(DSL.name("api_token_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.api_requests.path</code>.
     */
    public final TableField<ApiRequestsRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.api_requests.request</code>.
     */
    public final TableField<ApiRequestsRecord, String> REQUEST = createField(DSL.name("request"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.api_requests.response</code>.
     */
    public final TableField<ApiRequestsRecord, String> RESPONSE = createField(DSL.name("response"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.api_requests.ip</code>.
     */
    public final TableField<ApiRequestsRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.api_requests.created_at</code>.
     */
    public final TableField<ApiRequestsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private ApiRequests(Name alias, Table<ApiRequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiRequests(Name alias, Table<ApiRequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.api_requests</code> table reference
     */
    public ApiRequests(String alias) {
        this(DSL.name(alias), API_REQUESTS);
    }

    /**
     * Create an aliased <code>public.api_requests</code> table reference
     */
    public ApiRequests(Name alias) {
        this(alias, API_REQUESTS);
    }

    /**
     * Create a <code>public.api_requests</code> table reference
     */
    public ApiRequests() {
        this(DSL.name("api_requests"), null);
    }

    public <O extends Record> ApiRequests(Table<O> child, ForeignKey<O, ApiRequestsRecord> key) {
        super(child, key, API_REQUESTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.API_REQUEST_TOKEN_IDX);
    }

    @Override
    public UniqueKey<ApiRequestsRecord> getPrimaryKey() {
        return Keys.API_REQUEST_PKEY;
    }

    @Override
    public List<UniqueKey<ApiRequestsRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiRequestsRecord>>asList(Keys.API_REQUEST_PKEY);
    }

    @Override
    public ApiRequests as(String alias) {
        return new ApiRequests(DSL.name(alias), this);
    }

    @Override
    public ApiRequests as(Name alias) {
        return new ApiRequests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiRequests rename(String name) {
        return new ApiRequests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiRequests rename(Name name) {
        return new ApiRequests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, UUID, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
