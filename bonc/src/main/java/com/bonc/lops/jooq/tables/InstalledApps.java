/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.InstalledAppsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstalledApps extends TableImpl<InstalledAppsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.installed_apps</code>
     */
    public static final InstalledApps INSTALLED_APPS = new InstalledApps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstalledAppsRecord> getRecordType() {
        return InstalledAppsRecord.class;
    }

    /**
     * The column <code>public.installed_apps.id</code>.
     */
    public final TableField<InstalledAppsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.installed_apps.tenant_id</code>.
     */
    public final TableField<InstalledAppsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.installed_apps.app_id</code>.
     */
    public final TableField<InstalledAppsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.installed_apps.app_owner_tenant_id</code>.
     */
    public final TableField<InstalledAppsRecord, UUID> APP_OWNER_TENANT_ID = createField(DSL.name("app_owner_tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.installed_apps.position</code>.
     */
    public final TableField<InstalledAppsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.installed_apps.is_pinned</code>.
     */
    public final TableField<InstalledAppsRecord, Boolean> IS_PINNED = createField(DSL.name("is_pinned"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.installed_apps.last_used_at</code>.
     */
    public final TableField<InstalledAppsRecord, LocalDateTime> LAST_USED_AT = createField(DSL.name("last_used_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.installed_apps.created_at</code>.
     */
    public final TableField<InstalledAppsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private InstalledApps(Name alias, Table<InstalledAppsRecord> aliased) {
        this(alias, aliased, null);
    }

    private InstalledApps(Name alias, Table<InstalledAppsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.installed_apps</code> table reference
     */
    public InstalledApps(String alias) {
        this(DSL.name(alias), INSTALLED_APPS);
    }

    /**
     * Create an aliased <code>public.installed_apps</code> table reference
     */
    public InstalledApps(Name alias) {
        this(alias, INSTALLED_APPS);
    }

    /**
     * Create a <code>public.installed_apps</code> table reference
     */
    public InstalledApps() {
        this(DSL.name("installed_apps"), null);
    }

    public <O extends Record> InstalledApps(Table<O> child, ForeignKey<O, InstalledAppsRecord> key) {
        super(child, key, INSTALLED_APPS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INSTALLED_APP_APP_ID_IDX, Indexes.INSTALLED_APP_TENANT_ID_IDX);
    }

    @Override
    public UniqueKey<InstalledAppsRecord> getPrimaryKey() {
        return Keys.INSTALLED_APP_PKEY;
    }

    @Override
    public List<UniqueKey<InstalledAppsRecord>> getKeys() {
        return Arrays.<UniqueKey<InstalledAppsRecord>>asList(Keys.INSTALLED_APP_PKEY, Keys.UNIQUE_TENANT_APP);
    }

    @Override
    public InstalledApps as(String alias) {
        return new InstalledApps(DSL.name(alias), this);
    }

    @Override
    public InstalledApps as(Name alias) {
        return new InstalledApps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InstalledApps rename(String name) {
        return new InstalledApps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstalledApps rename(Name name) {
        return new InstalledApps(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, UUID, UUID, Integer, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
