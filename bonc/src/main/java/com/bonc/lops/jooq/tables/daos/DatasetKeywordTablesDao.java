/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.DatasetKeywordTables;
import com.bonc.lops.jooq.tables.records.DatasetKeywordTablesRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class DatasetKeywordTablesDao extends DAOImpl<DatasetKeywordTablesRecord, com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables, UUID> {

    /**
     * Create a new DatasetKeywordTablesDao without any configuration
     */
    public DatasetKeywordTablesDao() {
        super(DatasetKeywordTables.DATASET_KEYWORD_TABLES, com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables.class);
    }

    /**
     * Create a new DatasetKeywordTablesDao with an attached configuration
     */
    @Autowired
    public DatasetKeywordTablesDao(Configuration configuration) {
        super(DatasetKeywordTables.DATASET_KEYWORD_TABLES, com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DatasetKeywordTables.DATASET_KEYWORD_TABLES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables> fetchById(UUID... values) {
        return fetch(DatasetKeywordTables.DATASET_KEYWORD_TABLES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables fetchOneById(UUID value) {
        return fetchOne(DatasetKeywordTables.DATASET_KEYWORD_TABLES.ID, value);
    }

    /**
     * Fetch records that have <code>dataset_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables> fetchRangeOfDatasetId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DatasetKeywordTables.DATASET_KEYWORD_TABLES.DATASET_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dataset_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables> fetchByDatasetId(UUID... values) {
        return fetch(DatasetKeywordTables.DATASET_KEYWORD_TABLES.DATASET_ID, values);
    }

    /**
     * Fetch a unique record that has <code>dataset_id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables fetchOneByDatasetId(UUID value) {
        return fetchOne(DatasetKeywordTables.DATASET_KEYWORD_TABLES.DATASET_ID, value);
    }

    /**
     * Fetch records that have <code>keyword_table BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables> fetchRangeOfKeywordTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(DatasetKeywordTables.DATASET_KEYWORD_TABLES.KEYWORD_TABLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>keyword_table IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetKeywordTables> fetchByKeywordTable(String... values) {
        return fetch(DatasetKeywordTables.DATASET_KEYWORD_TABLES.KEYWORD_TABLE, values);
    }
}
