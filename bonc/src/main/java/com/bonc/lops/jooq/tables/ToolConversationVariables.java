/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ToolConversationVariablesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ToolConversationVariables extends TableImpl<ToolConversationVariablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tool_conversation_variables</code>
     */
    public static final ToolConversationVariables TOOL_CONVERSATION_VARIABLES = new ToolConversationVariables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ToolConversationVariablesRecord> getRecordType() {
        return ToolConversationVariablesRecord.class;
    }

    /**
     * The column <code>public.tool_conversation_variables.id</code>.
     */
    public final TableField<ToolConversationVariablesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tool_conversation_variables.user_id</code>.
     */
    public final TableField<ToolConversationVariablesRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_conversation_variables.tenant_id</code>.
     */
    public final TableField<ToolConversationVariablesRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_conversation_variables.conversation_id</code>.
     */
    public final TableField<ToolConversationVariablesRecord, UUID> CONVERSATION_ID = createField(DSL.name("conversation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_conversation_variables.variables_str</code>.
     */
    public final TableField<ToolConversationVariablesRecord, String> VARIABLES_STR = createField(DSL.name("variables_str"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tool_conversation_variables.created_at</code>.
     */
    public final TableField<ToolConversationVariablesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tool_conversation_variables.updated_at</code>.
     */
    public final TableField<ToolConversationVariablesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private ToolConversationVariables(Name alias, Table<ToolConversationVariablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ToolConversationVariables(Name alias, Table<ToolConversationVariablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tool_conversation_variables</code> table reference
     */
    public ToolConversationVariables(String alias) {
        this(DSL.name(alias), TOOL_CONVERSATION_VARIABLES);
    }

    /**
     * Create an aliased <code>public.tool_conversation_variables</code> table reference
     */
    public ToolConversationVariables(Name alias) {
        this(alias, TOOL_CONVERSATION_VARIABLES);
    }

    /**
     * Create a <code>public.tool_conversation_variables</code> table reference
     */
    public ToolConversationVariables() {
        this(DSL.name("tool_conversation_variables"), null);
    }

    public <O extends Record> ToolConversationVariables(Table<O> child, ForeignKey<O, ToolConversationVariablesRecord> key) {
        super(child, key, TOOL_CONVERSATION_VARIABLES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONVERSATION_ID_IDX, Indexes.USER_ID_IDX);
    }

    @Override
    public UniqueKey<ToolConversationVariablesRecord> getPrimaryKey() {
        return Keys.TOOL_CONVERSATION_VARIABLES_PKEY;
    }

    @Override
    public List<UniqueKey<ToolConversationVariablesRecord>> getKeys() {
        return Arrays.<UniqueKey<ToolConversationVariablesRecord>>asList(Keys.TOOL_CONVERSATION_VARIABLES_PKEY);
    }

    @Override
    public ToolConversationVariables as(String alias) {
        return new ToolConversationVariables(DSL.name(alias), this);
    }

    @Override
    public ToolConversationVariables as(Name alias) {
        return new ToolConversationVariables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolConversationVariables rename(String name) {
        return new ToolConversationVariables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolConversationVariables rename(Name name) {
        return new ToolConversationVariables(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, UUID, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
