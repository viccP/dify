/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.MessageAgentThoughtsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageAgentThoughts extends TableImpl<MessageAgentThoughtsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.message_agent_thoughts</code>
     */
    public static final MessageAgentThoughts MESSAGE_AGENT_THOUGHTS = new MessageAgentThoughts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageAgentThoughtsRecord> getRecordType() {
        return MessageAgentThoughtsRecord.class;
    }

    /**
     * The column <code>public.message_agent_thoughts.id</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.message_agent_thoughts.message_id</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, UUID> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.message_agent_thoughts.message_chain_id</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, UUID> MESSAGE_CHAIN_ID = createField(DSL.name("message_chain_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.message_agent_thoughts.position</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.message_agent_thoughts.thought</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> THOUGHT = createField(DSL.name("thought"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_agent_thoughts.tool</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> TOOL = createField(DSL.name("tool"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_agent_thoughts.tool_input</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> TOOL_INPUT = createField(DSL.name("tool_input"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_agent_thoughts.observation</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> OBSERVATION = createField(DSL.name("observation"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_agent_thoughts.tool_process_data</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> TOOL_PROCESS_DATA = createField(DSL.name("tool_process_data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_agent_thoughts.message</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_agent_thoughts.message_token</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, Integer> MESSAGE_TOKEN = createField(DSL.name("message_token"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.message_agent_thoughts.message_unit_price</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, BigDecimal> MESSAGE_UNIT_PRICE = createField(DSL.name("message_unit_price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.message_agent_thoughts.answer</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> ANSWER = createField(DSL.name("answer"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_agent_thoughts.answer_token</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, Integer> ANSWER_TOKEN = createField(DSL.name("answer_token"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.message_agent_thoughts.answer_unit_price</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, BigDecimal> ANSWER_UNIT_PRICE = createField(DSL.name("answer_unit_price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.message_agent_thoughts.tokens</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, Integer> TOKENS = createField(DSL.name("tokens"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.message_agent_thoughts.total_price</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, BigDecimal> TOTAL_PRICE = createField(DSL.name("total_price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.message_agent_thoughts.currency</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.message_agent_thoughts.latency</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, Double> LATENCY = createField(DSL.name("latency"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.message_agent_thoughts.created_by_role</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> CREATED_BY_ROLE = createField(DSL.name("created_by_role"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.message_agent_thoughts.created_by</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.message_agent_thoughts.created_at</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.message_agent_thoughts.message_price_unit</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, BigDecimal> MESSAGE_PRICE_UNIT = createField(DSL.name("message_price_unit"), SQLDataType.NUMERIC(10, 7).nullable(false).defaultValue(DSL.field("0.001", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.message_agent_thoughts.answer_price_unit</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, BigDecimal> ANSWER_PRICE_UNIT = createField(DSL.name("answer_price_unit"), SQLDataType.NUMERIC(10, 7).nullable(false).defaultValue(DSL.field("0.001", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.message_agent_thoughts.message_files</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> MESSAGE_FILES = createField(DSL.name("message_files"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_agent_thoughts.tool_labels_str</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> TOOL_LABELS_STR = createField(DSL.name("tool_labels_str"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'{}'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.message_agent_thoughts.tool_meta_str</code>.
     */
    public final TableField<MessageAgentThoughtsRecord, String> TOOL_META_STR = createField(DSL.name("tool_meta_str"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'{}'::text", SQLDataType.CLOB)), this, "");

    private MessageAgentThoughts(Name alias, Table<MessageAgentThoughtsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageAgentThoughts(Name alias, Table<MessageAgentThoughtsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.message_agent_thoughts</code> table reference
     */
    public MessageAgentThoughts(String alias) {
        this(DSL.name(alias), MESSAGE_AGENT_THOUGHTS);
    }

    /**
     * Create an aliased <code>public.message_agent_thoughts</code> table reference
     */
    public MessageAgentThoughts(Name alias) {
        this(alias, MESSAGE_AGENT_THOUGHTS);
    }

    /**
     * Create a <code>public.message_agent_thoughts</code> table reference
     */
    public MessageAgentThoughts() {
        this(DSL.name("message_agent_thoughts"), null);
    }

    public <O extends Record> MessageAgentThoughts(Table<O> child, ForeignKey<O, MessageAgentThoughtsRecord> key) {
        super(child, key, MESSAGE_AGENT_THOUGHTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_AGENT_THOUGHT_MESSAGE_CHAIN_ID_IDX, Indexes.MESSAGE_AGENT_THOUGHT_MESSAGE_ID_IDX);
    }

    @Override
    public UniqueKey<MessageAgentThoughtsRecord> getPrimaryKey() {
        return Keys.MESSAGE_AGENT_THOUGHT_PKEY;
    }

    @Override
    public List<UniqueKey<MessageAgentThoughtsRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageAgentThoughtsRecord>>asList(Keys.MESSAGE_AGENT_THOUGHT_PKEY);
    }

    @Override
    public MessageAgentThoughts as(String alias) {
        return new MessageAgentThoughts(DSL.name(alias), this);
    }

    @Override
    public MessageAgentThoughts as(Name alias) {
        return new MessageAgentThoughts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageAgentThoughts rename(String name) {
        return new MessageAgentThoughts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageAgentThoughts rename(Name name) {
        return new MessageAgentThoughts(name, null);
    }
}
