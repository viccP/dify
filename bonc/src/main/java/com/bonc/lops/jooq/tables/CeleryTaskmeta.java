/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.CeleryTaskmetaRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CeleryTaskmeta extends TableImpl<CeleryTaskmetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.celery_taskmeta</code>
     */
    public static final CeleryTaskmeta CELERY_TASKMETA = new CeleryTaskmeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CeleryTaskmetaRecord> getRecordType() {
        return CeleryTaskmetaRecord.class;
    }

    /**
     * The column <code>public.celery_taskmeta.id</code>.
     */
    public final TableField<CeleryTaskmetaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('task_id_sequence'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.celery_taskmeta.task_id</code>.
     */
    public final TableField<CeleryTaskmetaRecord, String> TASK_ID = createField(DSL.name("task_id"), SQLDataType.VARCHAR(155), this, "");

    /**
     * The column <code>public.celery_taskmeta.status</code>.
     */
    public final TableField<CeleryTaskmetaRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.celery_taskmeta.result</code>.
     */
    public final TableField<CeleryTaskmetaRecord, byte[]> RESULT = createField(DSL.name("result"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.celery_taskmeta.date_done</code>.
     */
    public final TableField<CeleryTaskmetaRecord, LocalDateTime> DATE_DONE = createField(DSL.name("date_done"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.celery_taskmeta.traceback</code>.
     */
    public final TableField<CeleryTaskmetaRecord, String> TRACEBACK = createField(DSL.name("traceback"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.celery_taskmeta.name</code>.
     */
    public final TableField<CeleryTaskmetaRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(155), this, "");

    /**
     * The column <code>public.celery_taskmeta.args</code>.
     */
    public final TableField<CeleryTaskmetaRecord, byte[]> ARGS = createField(DSL.name("args"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.celery_taskmeta.kwargs</code>.
     */
    public final TableField<CeleryTaskmetaRecord, byte[]> KWARGS = createField(DSL.name("kwargs"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.celery_taskmeta.worker</code>.
     */
    public final TableField<CeleryTaskmetaRecord, String> WORKER = createField(DSL.name("worker"), SQLDataType.VARCHAR(155), this, "");

    /**
     * The column <code>public.celery_taskmeta.retries</code>.
     */
    public final TableField<CeleryTaskmetaRecord, Integer> RETRIES = createField(DSL.name("retries"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.celery_taskmeta.queue</code>.
     */
    public final TableField<CeleryTaskmetaRecord, String> QUEUE = createField(DSL.name("queue"), SQLDataType.VARCHAR(155), this, "");

    private CeleryTaskmeta(Name alias, Table<CeleryTaskmetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private CeleryTaskmeta(Name alias, Table<CeleryTaskmetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.celery_taskmeta</code> table reference
     */
    public CeleryTaskmeta(String alias) {
        this(DSL.name(alias), CELERY_TASKMETA);
    }

    /**
     * Create an aliased <code>public.celery_taskmeta</code> table reference
     */
    public CeleryTaskmeta(Name alias) {
        this(alias, CELERY_TASKMETA);
    }

    /**
     * Create a <code>public.celery_taskmeta</code> table reference
     */
    public CeleryTaskmeta() {
        this(DSL.name("celery_taskmeta"), null);
    }

    public <O extends Record> CeleryTaskmeta(Table<O> child, ForeignKey<O, CeleryTaskmetaRecord> key) {
        super(child, key, CELERY_TASKMETA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CeleryTaskmetaRecord> getPrimaryKey() {
        return Keys.CELERY_TASKMETA_PKEY;
    }

    @Override
    public List<UniqueKey<CeleryTaskmetaRecord>> getKeys() {
        return Arrays.<UniqueKey<CeleryTaskmetaRecord>>asList(Keys.CELERY_TASKMETA_PKEY, Keys.CELERY_TASKMETA_TASK_ID_KEY);
    }

    @Override
    public CeleryTaskmeta as(String alias) {
        return new CeleryTaskmeta(DSL.name(alias), this);
    }

    @Override
    public CeleryTaskmeta as(Name alias) {
        return new CeleryTaskmeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CeleryTaskmeta rename(String name) {
        return new CeleryTaskmeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CeleryTaskmeta rename(Name name) {
        return new CeleryTaskmeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, byte[], LocalDateTime, String, String, byte[], byte[], String, Integer, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
