/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.TenantAccountJoinsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TenantAccountJoins extends TableImpl<TenantAccountJoinsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tenant_account_joins</code>
     */
    public static final TenantAccountJoins TENANT_ACCOUNT_JOINS = new TenantAccountJoins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenantAccountJoinsRecord> getRecordType() {
        return TenantAccountJoinsRecord.class;
    }

    /**
     * The column <code>public.tenant_account_joins.id</code>.
     */
    public final TableField<TenantAccountJoinsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tenant_account_joins.tenant_id</code>.
     */
    public final TableField<TenantAccountJoinsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tenant_account_joins.account_id</code>.
     */
    public final TableField<TenantAccountJoinsRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tenant_account_joins.role</code>.
     */
    public final TableField<TenantAccountJoinsRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.field("'normal'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tenant_account_joins.invited_by</code>.
     */
    public final TableField<TenantAccountJoinsRecord, UUID> INVITED_BY = createField(DSL.name("invited_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.tenant_account_joins.created_at</code>.
     */
    public final TableField<TenantAccountJoinsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tenant_account_joins.updated_at</code>.
     */
    public final TableField<TenantAccountJoinsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tenant_account_joins.current</code>.
     */
    public final TableField<TenantAccountJoinsRecord, Boolean> CURRENT = createField(DSL.name("current"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private TenantAccountJoins(Name alias, Table<TenantAccountJoinsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TenantAccountJoins(Name alias, Table<TenantAccountJoinsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tenant_account_joins</code> table reference
     */
    public TenantAccountJoins(String alias) {
        this(DSL.name(alias), TENANT_ACCOUNT_JOINS);
    }

    /**
     * Create an aliased <code>public.tenant_account_joins</code> table reference
     */
    public TenantAccountJoins(Name alias) {
        this(alias, TENANT_ACCOUNT_JOINS);
    }

    /**
     * Create a <code>public.tenant_account_joins</code> table reference
     */
    public TenantAccountJoins() {
        this(DSL.name("tenant_account_joins"), null);
    }

    public <O extends Record> TenantAccountJoins(Table<O> child, ForeignKey<O, TenantAccountJoinsRecord> key) {
        super(child, key, TENANT_ACCOUNT_JOINS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TENANT_ACCOUNT_JOIN_ACCOUNT_ID_IDX, Indexes.TENANT_ACCOUNT_JOIN_TENANT_ID_IDX);
    }

    @Override
    public UniqueKey<TenantAccountJoinsRecord> getPrimaryKey() {
        return Keys.TENANT_ACCOUNT_JOIN_PKEY;
    }

    @Override
    public List<UniqueKey<TenantAccountJoinsRecord>> getKeys() {
        return Arrays.<UniqueKey<TenantAccountJoinsRecord>>asList(Keys.TENANT_ACCOUNT_JOIN_PKEY, Keys.UNIQUE_TENANT_ACCOUNT_JOIN);
    }

    @Override
    public TenantAccountJoins as(String alias) {
        return new TenantAccountJoins(DSL.name(alias), this);
    }

    @Override
    public TenantAccountJoins as(Name alias) {
        return new TenantAccountJoins(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TenantAccountJoins rename(String name) {
        return new TenantAccountJoins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TenantAccountJoins rename(Name name) {
        return new TenantAccountJoins(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, UUID, String, UUID, LocalDateTime, LocalDateTime, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
