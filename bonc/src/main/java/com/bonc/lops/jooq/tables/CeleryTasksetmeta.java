/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.CeleryTasksetmetaRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CeleryTasksetmeta extends TableImpl<CeleryTasksetmetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.celery_tasksetmeta</code>
     */
    public static final CeleryTasksetmeta CELERY_TASKSETMETA = new CeleryTasksetmeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CeleryTasksetmetaRecord> getRecordType() {
        return CeleryTasksetmetaRecord.class;
    }

    /**
     * The column <code>public.celery_tasksetmeta.id</code>.
     */
    public final TableField<CeleryTasksetmetaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('taskset_id_sequence'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.celery_tasksetmeta.taskset_id</code>.
     */
    public final TableField<CeleryTasksetmetaRecord, String> TASKSET_ID = createField(DSL.name("taskset_id"), SQLDataType.VARCHAR(155), this, "");

    /**
     * The column <code>public.celery_tasksetmeta.result</code>.
     */
    public final TableField<CeleryTasksetmetaRecord, byte[]> RESULT = createField(DSL.name("result"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.celery_tasksetmeta.date_done</code>.
     */
    public final TableField<CeleryTasksetmetaRecord, LocalDateTime> DATE_DONE = createField(DSL.name("date_done"), SQLDataType.LOCALDATETIME(6), this, "");

    private CeleryTasksetmeta(Name alias, Table<CeleryTasksetmetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private CeleryTasksetmeta(Name alias, Table<CeleryTasksetmetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.celery_tasksetmeta</code> table reference
     */
    public CeleryTasksetmeta(String alias) {
        this(DSL.name(alias), CELERY_TASKSETMETA);
    }

    /**
     * Create an aliased <code>public.celery_tasksetmeta</code> table reference
     */
    public CeleryTasksetmeta(Name alias) {
        this(alias, CELERY_TASKSETMETA);
    }

    /**
     * Create a <code>public.celery_tasksetmeta</code> table reference
     */
    public CeleryTasksetmeta() {
        this(DSL.name("celery_tasksetmeta"), null);
    }

    public <O extends Record> CeleryTasksetmeta(Table<O> child, ForeignKey<O, CeleryTasksetmetaRecord> key) {
        super(child, key, CELERY_TASKSETMETA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CeleryTasksetmetaRecord> getPrimaryKey() {
        return Keys.CELERY_TASKSETMETA_PKEY;
    }

    @Override
    public List<UniqueKey<CeleryTasksetmetaRecord>> getKeys() {
        return Arrays.<UniqueKey<CeleryTasksetmetaRecord>>asList(Keys.CELERY_TASKSETMETA_PKEY, Keys.CELERY_TASKSETMETA_TASKSET_ID_KEY);
    }

    @Override
    public CeleryTasksetmeta as(String alias) {
        return new CeleryTasksetmeta(DSL.name(alias), this);
    }

    @Override
    public CeleryTasksetmeta as(Name alias) {
        return new CeleryTasksetmeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CeleryTasksetmeta rename(String name) {
        return new CeleryTasksetmeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CeleryTasksetmeta rename(Name name) {
        return new CeleryTasksetmeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, byte[], LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
