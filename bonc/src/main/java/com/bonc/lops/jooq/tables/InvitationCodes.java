/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.InvitationCodesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvitationCodes extends TableImpl<InvitationCodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.invitation_codes</code>
     */
    public static final InvitationCodes INVITATION_CODES = new InvitationCodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvitationCodesRecord> getRecordType() {
        return InvitationCodesRecord.class;
    }

    /**
     * The column <code>public.invitation_codes.id</code>.
     */
    public final TableField<InvitationCodesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.invitation_codes.batch</code>.
     */
    public final TableField<InvitationCodesRecord, String> BATCH = createField(DSL.name("batch"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.invitation_codes.code</code>.
     */
    public final TableField<InvitationCodesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.invitation_codes.status</code>.
     */
    public final TableField<InvitationCodesRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.field("'unused'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.invitation_codes.used_at</code>.
     */
    public final TableField<InvitationCodesRecord, LocalDateTime> USED_AT = createField(DSL.name("used_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.invitation_codes.used_by_tenant_id</code>.
     */
    public final TableField<InvitationCodesRecord, UUID> USED_BY_TENANT_ID = createField(DSL.name("used_by_tenant_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.invitation_codes.used_by_account_id</code>.
     */
    public final TableField<InvitationCodesRecord, UUID> USED_BY_ACCOUNT_ID = createField(DSL.name("used_by_account_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.invitation_codes.deprecated_at</code>.
     */
    public final TableField<InvitationCodesRecord, LocalDateTime> DEPRECATED_AT = createField(DSL.name("deprecated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.invitation_codes.created_at</code>.
     */
    public final TableField<InvitationCodesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private InvitationCodes(Name alias, Table<InvitationCodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvitationCodes(Name alias, Table<InvitationCodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.invitation_codes</code> table reference
     */
    public InvitationCodes(String alias) {
        this(DSL.name(alias), INVITATION_CODES);
    }

    /**
     * Create an aliased <code>public.invitation_codes</code> table reference
     */
    public InvitationCodes(Name alias) {
        this(alias, INVITATION_CODES);
    }

    /**
     * Create a <code>public.invitation_codes</code> table reference
     */
    public InvitationCodes() {
        this(DSL.name("invitation_codes"), null);
    }

    public <O extends Record> InvitationCodes(Table<O> child, ForeignKey<O, InvitationCodesRecord> key) {
        super(child, key, INVITATION_CODES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVITATION_CODES_BATCH_IDX, Indexes.INVITATION_CODES_CODE_IDX);
    }

    @Override
    public Identity<InvitationCodesRecord, Integer> getIdentity() {
        return (Identity<InvitationCodesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InvitationCodesRecord> getPrimaryKey() {
        return Keys.INVITATION_CODE_PKEY;
    }

    @Override
    public List<UniqueKey<InvitationCodesRecord>> getKeys() {
        return Arrays.<UniqueKey<InvitationCodesRecord>>asList(Keys.INVITATION_CODE_PKEY);
    }

    @Override
    public InvitationCodes as(String alias) {
        return new InvitationCodes(DSL.name(alias), this);
    }

    @Override
    public InvitationCodes as(Name alias) {
        return new InvitationCodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvitationCodes rename(String name) {
        return new InvitationCodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvitationCodes rename(Name name) {
        return new InvitationCodes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, LocalDateTime, UUID, UUID, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
