/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ToolProvidersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ToolProviders extends TableImpl<ToolProvidersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tool_providers</code>
     */
    public static final ToolProviders TOOL_PROVIDERS = new ToolProviders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ToolProvidersRecord> getRecordType() {
        return ToolProvidersRecord.class;
    }

    /**
     * The column <code>public.tool_providers.id</code>.
     */
    public final TableField<ToolProvidersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tool_providers.tenant_id</code>.
     */
    public final TableField<ToolProvidersRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tool_providers.tool_name</code>.
     */
    public final TableField<ToolProvidersRecord, String> TOOL_NAME = createField(DSL.name("tool_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tool_providers.encrypted_credentials</code>.
     */
    public final TableField<ToolProvidersRecord, String> ENCRYPTED_CREDENTIALS = createField(DSL.name("encrypted_credentials"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tool_providers.is_enabled</code>.
     */
    public final TableField<ToolProvidersRecord, Boolean> IS_ENABLED = createField(DSL.name("is_enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.tool_providers.created_at</code>.
     */
    public final TableField<ToolProvidersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tool_providers.updated_at</code>.
     */
    public final TableField<ToolProvidersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private ToolProviders(Name alias, Table<ToolProvidersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ToolProviders(Name alias, Table<ToolProvidersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tool_providers</code> table reference
     */
    public ToolProviders(String alias) {
        this(DSL.name(alias), TOOL_PROVIDERS);
    }

    /**
     * Create an aliased <code>public.tool_providers</code> table reference
     */
    public ToolProviders(Name alias) {
        this(alias, TOOL_PROVIDERS);
    }

    /**
     * Create a <code>public.tool_providers</code> table reference
     */
    public ToolProviders() {
        this(DSL.name("tool_providers"), null);
    }

    public <O extends Record> ToolProviders(Table<O> child, ForeignKey<O, ToolProvidersRecord> key) {
        super(child, key, TOOL_PROVIDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ToolProvidersRecord> getPrimaryKey() {
        return Keys.TOOL_PROVIDER_PKEY;
    }

    @Override
    public List<UniqueKey<ToolProvidersRecord>> getKeys() {
        return Arrays.<UniqueKey<ToolProvidersRecord>>asList(Keys.TOOL_PROVIDER_PKEY, Keys.UNIQUE_TOOL_PROVIDER_TOOL_NAME);
    }

    @Override
    public ToolProviders as(String alias) {
        return new ToolProviders(DSL.name(alias), this);
    }

    @Override
    public ToolProviders as(Name alias) {
        return new ToolProviders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolProviders rename(String name) {
        return new ToolProviders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ToolProviders rename(Name name) {
        return new ToolProviders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, String, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
