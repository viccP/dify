/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DatasetCollectionBindingsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetCollectionBindings extends TableImpl<DatasetCollectionBindingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dataset_collection_bindings</code>
     */
    public static final DatasetCollectionBindings DATASET_COLLECTION_BINDINGS = new DatasetCollectionBindings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetCollectionBindingsRecord> getRecordType() {
        return DatasetCollectionBindingsRecord.class;
    }

    /**
     * The column <code>public.dataset_collection_bindings.id</code>.
     */
    public final TableField<DatasetCollectionBindingsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.dataset_collection_bindings.provider_name</code>.
     */
    public final TableField<DatasetCollectionBindingsRecord, String> PROVIDER_NAME = createField(DSL.name("provider_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.dataset_collection_bindings.model_name</code>.
     */
    public final TableField<DatasetCollectionBindingsRecord, String> MODEL_NAME = createField(DSL.name("model_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.dataset_collection_bindings.collection_name</code>.
     */
    public final TableField<DatasetCollectionBindingsRecord, String> COLLECTION_NAME = createField(DSL.name("collection_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.dataset_collection_bindings.created_at</code>.
     */
    public final TableField<DatasetCollectionBindingsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.dataset_collection_bindings.type</code>.
     */
    public final TableField<DatasetCollectionBindingsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(40).nullable(false).defaultValue(DSL.field("'dataset'::character varying", SQLDataType.VARCHAR)), this, "");

    private DatasetCollectionBindings(Name alias, Table<DatasetCollectionBindingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetCollectionBindings(Name alias, Table<DatasetCollectionBindingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dataset_collection_bindings</code> table reference
     */
    public DatasetCollectionBindings(String alias) {
        this(DSL.name(alias), DATASET_COLLECTION_BINDINGS);
    }

    /**
     * Create an aliased <code>public.dataset_collection_bindings</code> table reference
     */
    public DatasetCollectionBindings(Name alias) {
        this(alias, DATASET_COLLECTION_BINDINGS);
    }

    /**
     * Create a <code>public.dataset_collection_bindings</code> table reference
     */
    public DatasetCollectionBindings() {
        this(DSL.name("dataset_collection_bindings"), null);
    }

    public <O extends Record> DatasetCollectionBindings(Table<O> child, ForeignKey<O, DatasetCollectionBindingsRecord> key) {
        super(child, key, DATASET_COLLECTION_BINDINGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROVIDER_MODEL_NAME_IDX);
    }

    @Override
    public UniqueKey<DatasetCollectionBindingsRecord> getPrimaryKey() {
        return Keys.DATASET_COLLECTION_BINDINGS_PKEY;
    }

    @Override
    public List<UniqueKey<DatasetCollectionBindingsRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetCollectionBindingsRecord>>asList(Keys.DATASET_COLLECTION_BINDINGS_PKEY);
    }

    @Override
    public DatasetCollectionBindings as(String alias) {
        return new DatasetCollectionBindings(DSL.name(alias), this);
    }

    @Override
    public DatasetCollectionBindings as(Name alias) {
        return new DatasetCollectionBindings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetCollectionBindings rename(String name) {
        return new DatasetCollectionBindings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetCollectionBindings rename(Name name) {
        return new DatasetCollectionBindings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
