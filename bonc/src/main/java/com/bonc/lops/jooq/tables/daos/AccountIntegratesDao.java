/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.AccountIntegrates;
import com.bonc.lops.jooq.tables.records.AccountIntegratesRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AccountIntegratesDao extends DAOImpl<AccountIntegratesRecord, com.bonc.lops.jooq.tables.pojos.AccountIntegrates, UUID> {

    /**
     * Create a new AccountIntegratesDao without any configuration
     */
    public AccountIntegratesDao() {
        super(AccountIntegrates.ACCOUNT_INTEGRATES, com.bonc.lops.jooq.tables.pojos.AccountIntegrates.class);
    }

    /**
     * Create a new AccountIntegratesDao with an attached configuration
     */
    @Autowired
    public AccountIntegratesDao(Configuration configuration) {
        super(AccountIntegrates.ACCOUNT_INTEGRATES, com.bonc.lops.jooq.tables.pojos.AccountIntegrates.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.AccountIntegrates object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AccountIntegrates.ACCOUNT_INTEGRATES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchById(UUID... values) {
        return fetch(AccountIntegrates.ACCOUNT_INTEGRATES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.AccountIntegrates fetchOneById(UUID value) {
        return fetchOne(AccountIntegrates.ACCOUNT_INTEGRATES.ID, value);
    }

    /**
     * Fetch records that have <code>account_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchRangeOfAccountId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AccountIntegrates.ACCOUNT_INTEGRATES.ACCOUNT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchByAccountId(UUID... values) {
        return fetch(AccountIntegrates.ACCOUNT_INTEGRATES.ACCOUNT_ID, values);
    }

    /**
     * Fetch records that have <code>provider BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchRangeOfProvider(String lowerInclusive, String upperInclusive) {
        return fetchRange(AccountIntegrates.ACCOUNT_INTEGRATES.PROVIDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>provider IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchByProvider(String... values) {
        return fetch(AccountIntegrates.ACCOUNT_INTEGRATES.PROVIDER, values);
    }

    /**
     * Fetch records that have <code>open_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchRangeOfOpenId(String lowerInclusive, String upperInclusive) {
        return fetchRange(AccountIntegrates.ACCOUNT_INTEGRATES.OPEN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>open_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchByOpenId(String... values) {
        return fetch(AccountIntegrates.ACCOUNT_INTEGRATES.OPEN_ID, values);
    }

    /**
     * Fetch records that have <code>encrypted_token BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchRangeOfEncryptedToken(String lowerInclusive, String upperInclusive) {
        return fetchRange(AccountIntegrates.ACCOUNT_INTEGRATES.ENCRYPTED_TOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>encrypted_token IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchByEncryptedToken(String... values) {
        return fetch(AccountIntegrates.ACCOUNT_INTEGRATES.ENCRYPTED_TOKEN, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(AccountIntegrates.ACCOUNT_INTEGRATES.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(AccountIntegrates.ACCOUNT_INTEGRATES.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(AccountIntegrates.ACCOUNT_INTEGRATES.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.AccountIntegrates> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(AccountIntegrates.ACCOUNT_INTEGRATES.UPDATED_AT, values);
    }
}
