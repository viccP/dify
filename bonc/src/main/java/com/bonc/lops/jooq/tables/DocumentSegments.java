/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DocumentSegmentsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentSegments extends TableImpl<DocumentSegmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.document_segments</code>
     */
    public static final DocumentSegments DOCUMENT_SEGMENTS = new DocumentSegments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentSegmentsRecord> getRecordType() {
        return DocumentSegmentsRecord.class;
    }

    /**
     * The column <code>public.document_segments.id</code>.
     */
    public final TableField<DocumentSegmentsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.document_segments.tenant_id</code>.
     */
    public final TableField<DocumentSegmentsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.dataset_id</code>.
     */
    public final TableField<DocumentSegmentsRecord, UUID> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.document_id</code>.
     */
    public final TableField<DocumentSegmentsRecord, UUID> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.position</code>.
     */
    public final TableField<DocumentSegmentsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.content</code>.
     */
    public final TableField<DocumentSegmentsRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.word_count</code>.
     */
    public final TableField<DocumentSegmentsRecord, Integer> WORD_COUNT = createField(DSL.name("word_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.tokens</code>.
     */
    public final TableField<DocumentSegmentsRecord, Integer> TOKENS = createField(DSL.name("tokens"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.keywords</code>.
     */
    public final TableField<DocumentSegmentsRecord, JSON> KEYWORDS = createField(DSL.name("keywords"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.document_segments.index_node_id</code>.
     */
    public final TableField<DocumentSegmentsRecord, String> INDEX_NODE_ID = createField(DSL.name("index_node_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.document_segments.index_node_hash</code>.
     */
    public final TableField<DocumentSegmentsRecord, String> INDEX_NODE_HASH = createField(DSL.name("index_node_hash"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.document_segments.hit_count</code>.
     */
    public final TableField<DocumentSegmentsRecord, Integer> HIT_COUNT = createField(DSL.name("hit_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.enabled</code>.
     */
    public final TableField<DocumentSegmentsRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.document_segments.disabled_at</code>.
     */
    public final TableField<DocumentSegmentsRecord, LocalDateTime> DISABLED_AT = createField(DSL.name("disabled_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.document_segments.disabled_by</code>.
     */
    public final TableField<DocumentSegmentsRecord, UUID> DISABLED_BY = createField(DSL.name("disabled_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.document_segments.status</code>.
     */
    public final TableField<DocumentSegmentsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'waiting'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.document_segments.created_by</code>.
     */
    public final TableField<DocumentSegmentsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.document_segments.created_at</code>.
     */
    public final TableField<DocumentSegmentsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.document_segments.indexing_at</code>.
     */
    public final TableField<DocumentSegmentsRecord, LocalDateTime> INDEXING_AT = createField(DSL.name("indexing_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.document_segments.completed_at</code>.
     */
    public final TableField<DocumentSegmentsRecord, LocalDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.document_segments.error</code>.
     */
    public final TableField<DocumentSegmentsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.document_segments.stopped_at</code>.
     */
    public final TableField<DocumentSegmentsRecord, LocalDateTime> STOPPED_AT = createField(DSL.name("stopped_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.document_segments.answer</code>.
     */
    public final TableField<DocumentSegmentsRecord, String> ANSWER = createField(DSL.name("answer"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.document_segments.updated_by</code>.
     */
    public final TableField<DocumentSegmentsRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.document_segments.updated_at</code>.
     */
    public final TableField<DocumentSegmentsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private DocumentSegments(Name alias, Table<DocumentSegmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentSegments(Name alias, Table<DocumentSegmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.document_segments</code> table reference
     */
    public DocumentSegments(String alias) {
        this(DSL.name(alias), DOCUMENT_SEGMENTS);
    }

    /**
     * Create an aliased <code>public.document_segments</code> table reference
     */
    public DocumentSegments(Name alias) {
        this(alias, DOCUMENT_SEGMENTS);
    }

    /**
     * Create a <code>public.document_segments</code> table reference
     */
    public DocumentSegments() {
        this(DSL.name("document_segments"), null);
    }

    public <O extends Record> DocumentSegments(Table<O> child, ForeignKey<O, DocumentSegmentsRecord> key) {
        super(child, key, DOCUMENT_SEGMENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCUMENT_SEGMENT_DATASET_ID_IDX, Indexes.DOCUMENT_SEGMENT_DATASET_NODE_IDX, Indexes.DOCUMENT_SEGMENT_DOCUMENT_ID_IDX, Indexes.DOCUMENT_SEGMENT_TENANT_DATASET_IDX, Indexes.DOCUMENT_SEGMENT_TENANT_DOCUMENT_IDX, Indexes.DOCUMENT_SEGMENT_TENANT_IDX);
    }

    @Override
    public UniqueKey<DocumentSegmentsRecord> getPrimaryKey() {
        return Keys.DOCUMENT_SEGMENT_PKEY;
    }

    @Override
    public List<UniqueKey<DocumentSegmentsRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentSegmentsRecord>>asList(Keys.DOCUMENT_SEGMENT_PKEY);
    }

    @Override
    public DocumentSegments as(String alias) {
        return new DocumentSegments(DSL.name(alias), this);
    }

    @Override
    public DocumentSegments as(Name alias) {
        return new DocumentSegments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentSegments rename(String name) {
        return new DocumentSegments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentSegments rename(Name name) {
        return new DocumentSegments(name, null);
    }
}
