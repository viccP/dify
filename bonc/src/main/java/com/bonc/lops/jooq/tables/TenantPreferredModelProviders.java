/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.TenantPreferredModelProvidersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TenantPreferredModelProviders extends TableImpl<TenantPreferredModelProvidersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tenant_preferred_model_providers</code>
     */
    public static final TenantPreferredModelProviders TENANT_PREFERRED_MODEL_PROVIDERS = new TenantPreferredModelProviders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenantPreferredModelProvidersRecord> getRecordType() {
        return TenantPreferredModelProvidersRecord.class;
    }

    /**
     * The column <code>public.tenant_preferred_model_providers.id</code>.
     */
    public final TableField<TenantPreferredModelProvidersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tenant_preferred_model_providers.tenant_id</code>.
     */
    public final TableField<TenantPreferredModelProvidersRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tenant_preferred_model_providers.provider_name</code>.
     */
    public final TableField<TenantPreferredModelProvidersRecord, String> PROVIDER_NAME = createField(DSL.name("provider_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tenant_preferred_model_providers.preferred_provider_type</code>.
     */
    public final TableField<TenantPreferredModelProvidersRecord, String> PREFERRED_PROVIDER_TYPE = createField(DSL.name("preferred_provider_type"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.tenant_preferred_model_providers.created_at</code>.
     */
    public final TableField<TenantPreferredModelProvidersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tenant_preferred_model_providers.updated_at</code>.
     */
    public final TableField<TenantPreferredModelProvidersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private TenantPreferredModelProviders(Name alias, Table<TenantPreferredModelProvidersRecord> aliased) {
        this(alias, aliased, null);
    }

    private TenantPreferredModelProviders(Name alias, Table<TenantPreferredModelProvidersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tenant_preferred_model_providers</code> table reference
     */
    public TenantPreferredModelProviders(String alias) {
        this(DSL.name(alias), TENANT_PREFERRED_MODEL_PROVIDERS);
    }

    /**
     * Create an aliased <code>public.tenant_preferred_model_providers</code> table reference
     */
    public TenantPreferredModelProviders(Name alias) {
        this(alias, TENANT_PREFERRED_MODEL_PROVIDERS);
    }

    /**
     * Create a <code>public.tenant_preferred_model_providers</code> table reference
     */
    public TenantPreferredModelProviders() {
        this(DSL.name("tenant_preferred_model_providers"), null);
    }

    public <O extends Record> TenantPreferredModelProviders(Table<O> child, ForeignKey<O, TenantPreferredModelProvidersRecord> key) {
        super(child, key, TENANT_PREFERRED_MODEL_PROVIDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TENANT_PREFERRED_MODEL_PROVIDER_TENANT_PROVIDER_IDX);
    }

    @Override
    public UniqueKey<TenantPreferredModelProvidersRecord> getPrimaryKey() {
        return Keys.TENANT_PREFERRED_MODEL_PROVIDER_PKEY;
    }

    @Override
    public List<UniqueKey<TenantPreferredModelProvidersRecord>> getKeys() {
        return Arrays.<UniqueKey<TenantPreferredModelProvidersRecord>>asList(Keys.TENANT_PREFERRED_MODEL_PROVIDER_PKEY);
    }

    @Override
    public TenantPreferredModelProviders as(String alias) {
        return new TenantPreferredModelProviders(DSL.name(alias), this);
    }

    @Override
    public TenantPreferredModelProviders as(Name alias) {
        return new TenantPreferredModelProviders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TenantPreferredModelProviders rename(String name) {
        return new TenantPreferredModelProviders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TenantPreferredModelProviders rename(Name name) {
        return new TenantPreferredModelProviders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
