/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.WorkflowRunsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowRuns extends TableImpl<WorkflowRunsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.workflow_runs</code>
     */
    public static final WorkflowRuns WORKFLOW_RUNS = new WorkflowRuns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowRunsRecord> getRecordType() {
        return WorkflowRunsRecord.class;
    }

    /**
     * The column <code>public.workflow_runs.id</code>.
     */
    public final TableField<WorkflowRunsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.workflow_runs.tenant_id</code>.
     */
    public final TableField<WorkflowRunsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.app_id</code>.
     */
    public final TableField<WorkflowRunsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.sequence_number</code>.
     */
    public final TableField<WorkflowRunsRecord, Integer> SEQUENCE_NUMBER = createField(DSL.name("sequence_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.workflow_id</code>.
     */
    public final TableField<WorkflowRunsRecord, UUID> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.type</code>.
     */
    public final TableField<WorkflowRunsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.triggered_from</code>.
     */
    public final TableField<WorkflowRunsRecord, String> TRIGGERED_FROM = createField(DSL.name("triggered_from"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.version</code>.
     */
    public final TableField<WorkflowRunsRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.graph</code>.
     */
    public final TableField<WorkflowRunsRecord, String> GRAPH = createField(DSL.name("graph"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.workflow_runs.inputs</code>.
     */
    public final TableField<WorkflowRunsRecord, String> INPUTS = createField(DSL.name("inputs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.workflow_runs.status</code>.
     */
    public final TableField<WorkflowRunsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.outputs</code>.
     */
    public final TableField<WorkflowRunsRecord, String> OUTPUTS = createField(DSL.name("outputs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.workflow_runs.error</code>.
     */
    public final TableField<WorkflowRunsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.workflow_runs.elapsed_time</code>.
     */
    public final TableField<WorkflowRunsRecord, Double> ELAPSED_TIME = createField(DSL.name("elapsed_time"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.workflow_runs.total_tokens</code>.
     */
    public final TableField<WorkflowRunsRecord, Integer> TOTAL_TOKENS = createField(DSL.name("total_tokens"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.workflow_runs.total_steps</code>.
     */
    public final TableField<WorkflowRunsRecord, Integer> TOTAL_STEPS = createField(DSL.name("total_steps"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.workflow_runs.created_by_role</code>.
     */
    public final TableField<WorkflowRunsRecord, String> CREATED_BY_ROLE = createField(DSL.name("created_by_role"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.created_by</code>.
     */
    public final TableField<WorkflowRunsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_runs.created_at</code>.
     */
    public final TableField<WorkflowRunsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.workflow_runs.finished_at</code>.
     */
    public final TableField<WorkflowRunsRecord, LocalDateTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private WorkflowRuns(Name alias, Table<WorkflowRunsRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowRuns(Name alias, Table<WorkflowRunsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.workflow_runs</code> table reference
     */
    public WorkflowRuns(String alias) {
        this(DSL.name(alias), WORKFLOW_RUNS);
    }

    /**
     * Create an aliased <code>public.workflow_runs</code> table reference
     */
    public WorkflowRuns(Name alias) {
        this(alias, WORKFLOW_RUNS);
    }

    /**
     * Create a <code>public.workflow_runs</code> table reference
     */
    public WorkflowRuns() {
        this(DSL.name("workflow_runs"), null);
    }

    public <O extends Record> WorkflowRuns(Table<O> child, ForeignKey<O, WorkflowRunsRecord> key) {
        super(child, key, WORKFLOW_RUNS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_RUN_TRIGGERD_FROM_IDX);
    }

    @Override
    public UniqueKey<WorkflowRunsRecord> getPrimaryKey() {
        return Keys.WORKFLOW_RUN_PKEY;
    }

    @Override
    public List<UniqueKey<WorkflowRunsRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowRunsRecord>>asList(Keys.WORKFLOW_RUN_PKEY);
    }

    @Override
    public WorkflowRuns as(String alias) {
        return new WorkflowRuns(DSL.name(alias), this);
    }

    @Override
    public WorkflowRuns as(Name alias) {
        return new WorkflowRuns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowRuns rename(String name) {
        return new WorkflowRuns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowRuns rename(Name name) {
        return new WorkflowRuns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, UUID, UUID, Integer, UUID, String, String, String, String, String, String, String, String, Double, Integer, Integer, String, UUID, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
