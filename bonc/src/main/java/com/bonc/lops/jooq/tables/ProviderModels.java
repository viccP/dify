/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.ProviderModelsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProviderModels extends TableImpl<ProviderModelsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.provider_models</code>
     */
    public static final ProviderModels PROVIDER_MODELS = new ProviderModels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProviderModelsRecord> getRecordType() {
        return ProviderModelsRecord.class;
    }

    /**
     * The column <code>public.provider_models.id</code>.
     */
    public final TableField<ProviderModelsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.provider_models.tenant_id</code>.
     */
    public final TableField<ProviderModelsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.provider_models.provider_name</code>.
     */
    public final TableField<ProviderModelsRecord, String> PROVIDER_NAME = createField(DSL.name("provider_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.provider_models.model_name</code>.
     */
    public final TableField<ProviderModelsRecord, String> MODEL_NAME = createField(DSL.name("model_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.provider_models.model_type</code>.
     */
    public final TableField<ProviderModelsRecord, String> MODEL_TYPE = createField(DSL.name("model_type"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.provider_models.encrypted_config</code>.
     */
    public final TableField<ProviderModelsRecord, String> ENCRYPTED_CONFIG = createField(DSL.name("encrypted_config"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.provider_models.is_valid</code>.
     */
    public final TableField<ProviderModelsRecord, Boolean> IS_VALID = createField(DSL.name("is_valid"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.provider_models.created_at</code>.
     */
    public final TableField<ProviderModelsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.provider_models.updated_at</code>.
     */
    public final TableField<ProviderModelsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private ProviderModels(Name alias, Table<ProviderModelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProviderModels(Name alias, Table<ProviderModelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.provider_models</code> table reference
     */
    public ProviderModels(String alias) {
        this(DSL.name(alias), PROVIDER_MODELS);
    }

    /**
     * Create an aliased <code>public.provider_models</code> table reference
     */
    public ProviderModels(Name alias) {
        this(alias, PROVIDER_MODELS);
    }

    /**
     * Create a <code>public.provider_models</code> table reference
     */
    public ProviderModels() {
        this(DSL.name("provider_models"), null);
    }

    public <O extends Record> ProviderModels(Table<O> child, ForeignKey<O, ProviderModelsRecord> key) {
        super(child, key, PROVIDER_MODELS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROVIDER_MODEL_TENANT_ID_PROVIDER_IDX);
    }

    @Override
    public UniqueKey<ProviderModelsRecord> getPrimaryKey() {
        return Keys.PROVIDER_MODEL_PKEY;
    }

    @Override
    public List<UniqueKey<ProviderModelsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProviderModelsRecord>>asList(Keys.PROVIDER_MODEL_PKEY, Keys.UNIQUE_PROVIDER_MODEL_NAME);
    }

    @Override
    public ProviderModels as(String alias) {
        return new ProviderModels(DSL.name(alias), this);
    }

    @Override
    public ProviderModels as(Name alias) {
        return new ProviderModels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProviderModels rename(String name) {
        return new ProviderModels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProviderModels rename(Name name) {
        return new ProviderModels(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, UUID, String, String, String, String, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
