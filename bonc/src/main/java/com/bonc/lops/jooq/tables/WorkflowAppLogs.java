/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.WorkflowAppLogsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowAppLogs extends TableImpl<WorkflowAppLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.workflow_app_logs</code>
     */
    public static final WorkflowAppLogs WORKFLOW_APP_LOGS = new WorkflowAppLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowAppLogsRecord> getRecordType() {
        return WorkflowAppLogsRecord.class;
    }

    /**
     * The column <code>public.workflow_app_logs.id</code>.
     */
    public final TableField<WorkflowAppLogsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.workflow_app_logs.tenant_id</code>.
     */
    public final TableField<WorkflowAppLogsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_app_logs.app_id</code>.
     */
    public final TableField<WorkflowAppLogsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_app_logs.workflow_id</code>.
     */
    public final TableField<WorkflowAppLogsRecord, UUID> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_app_logs.workflow_run_id</code>.
     */
    public final TableField<WorkflowAppLogsRecord, UUID> WORKFLOW_RUN_ID = createField(DSL.name("workflow_run_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_app_logs.created_from</code>.
     */
    public final TableField<WorkflowAppLogsRecord, String> CREATED_FROM = createField(DSL.name("created_from"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflow_app_logs.created_by_role</code>.
     */
    public final TableField<WorkflowAppLogsRecord, String> CREATED_BY_ROLE = createField(DSL.name("created_by_role"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.workflow_app_logs.created_by</code>.
     */
    public final TableField<WorkflowAppLogsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.workflow_app_logs.created_at</code>.
     */
    public final TableField<WorkflowAppLogsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private WorkflowAppLogs(Name alias, Table<WorkflowAppLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowAppLogs(Name alias, Table<WorkflowAppLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.workflow_app_logs</code> table reference
     */
    public WorkflowAppLogs(String alias) {
        this(DSL.name(alias), WORKFLOW_APP_LOGS);
    }

    /**
     * Create an aliased <code>public.workflow_app_logs</code> table reference
     */
    public WorkflowAppLogs(Name alias) {
        this(alias, WORKFLOW_APP_LOGS);
    }

    /**
     * Create a <code>public.workflow_app_logs</code> table reference
     */
    public WorkflowAppLogs() {
        this(DSL.name("workflow_app_logs"), null);
    }

    public <O extends Record> WorkflowAppLogs(Table<O> child, ForeignKey<O, WorkflowAppLogsRecord> key) {
        super(child, key, WORKFLOW_APP_LOGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_APP_LOG_APP_IDX);
    }

    @Override
    public UniqueKey<WorkflowAppLogsRecord> getPrimaryKey() {
        return Keys.WORKFLOW_APP_LOG_PKEY;
    }

    @Override
    public List<UniqueKey<WorkflowAppLogsRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowAppLogsRecord>>asList(Keys.WORKFLOW_APP_LOG_PKEY);
    }

    @Override
    public WorkflowAppLogs as(String alias) {
        return new WorkflowAppLogs(DSL.name(alias), this);
    }

    @Override
    public WorkflowAppLogs as(Name alias) {
        return new WorkflowAppLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowAppLogs rename(String name) {
        return new WorkflowAppLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowAppLogs rename(Name name) {
        return new WorkflowAppLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, UUID, UUID, UUID, UUID, String, String, UUID, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
