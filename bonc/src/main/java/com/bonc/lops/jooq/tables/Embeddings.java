/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.EmbeddingsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Embeddings extends TableImpl<EmbeddingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.embeddings</code>
     */
    public static final Embeddings EMBEDDINGS = new Embeddings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmbeddingsRecord> getRecordType() {
        return EmbeddingsRecord.class;
    }

    /**
     * The column <code>public.embeddings.id</code>.
     */
    public final TableField<EmbeddingsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.embeddings.hash</code>.
     */
    public final TableField<EmbeddingsRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.embeddings.embedding</code>.
     */
    public final TableField<EmbeddingsRecord, byte[]> EMBEDDING = createField(DSL.name("embedding"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>public.embeddings.created_at</code>.
     */
    public final TableField<EmbeddingsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.embeddings.model_name</code>.
     */
    public final TableField<EmbeddingsRecord, String> MODEL_NAME = createField(DSL.name("model_name"), SQLDataType.VARCHAR(40).nullable(false).defaultValue(DSL.field("'text-embedding-ada-002'::character varying", SQLDataType.VARCHAR)), this, "");

    private Embeddings(Name alias, Table<EmbeddingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Embeddings(Name alias, Table<EmbeddingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.embeddings</code> table reference
     */
    public Embeddings(String alias) {
        this(DSL.name(alias), EMBEDDINGS);
    }

    /**
     * Create an aliased <code>public.embeddings</code> table reference
     */
    public Embeddings(Name alias) {
        this(alias, EMBEDDINGS);
    }

    /**
     * Create a <code>public.embeddings</code> table reference
     */
    public Embeddings() {
        this(DSL.name("embeddings"), null);
    }

    public <O extends Record> Embeddings(Table<O> child, ForeignKey<O, EmbeddingsRecord> key) {
        super(child, key, EMBEDDINGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<EmbeddingsRecord> getPrimaryKey() {
        return Keys.EMBEDDING_PKEY;
    }

    @Override
    public List<UniqueKey<EmbeddingsRecord>> getKeys() {
        return Arrays.<UniqueKey<EmbeddingsRecord>>asList(Keys.EMBEDDING_PKEY, Keys.EMBEDDING_HASH_IDX);
    }

    @Override
    public Embeddings as(String alias) {
        return new Embeddings(DSL.name(alias), this);
    }

    @Override
    public Embeddings as(Name alias) {
        return new Embeddings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Embeddings rename(String name) {
        return new Embeddings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Embeddings rename(Name name) {
        return new Embeddings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, byte[], LocalDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
