/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.AppAnnotationHitHistoriesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppAnnotationHitHistories extends TableImpl<AppAnnotationHitHistoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.app_annotation_hit_histories</code>
     */
    public static final AppAnnotationHitHistories APP_ANNOTATION_HIT_HISTORIES = new AppAnnotationHitHistories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppAnnotationHitHistoriesRecord> getRecordType() {
        return AppAnnotationHitHistoriesRecord.class;
    }

    /**
     * The column <code>public.app_annotation_hit_histories.id</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.app_id</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.annotation_id</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, UUID> ANNOTATION_ID = createField(DSL.name("annotation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.source</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.question</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, String> QUESTION = createField(DSL.name("question"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.account_id</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.created_at</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.score</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, Double> SCORE = createField(DSL.name("score"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.message_id</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, UUID> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.annotation_question</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, String> ANNOTATION_QUESTION = createField(DSL.name("annotation_question"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.app_annotation_hit_histories.annotation_content</code>.
     */
    public final TableField<AppAnnotationHitHistoriesRecord, String> ANNOTATION_CONTENT = createField(DSL.name("annotation_content"), SQLDataType.CLOB.nullable(false), this, "");

    private AppAnnotationHitHistories(Name alias, Table<AppAnnotationHitHistoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppAnnotationHitHistories(Name alias, Table<AppAnnotationHitHistoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.app_annotation_hit_histories</code> table reference
     */
    public AppAnnotationHitHistories(String alias) {
        this(DSL.name(alias), APP_ANNOTATION_HIT_HISTORIES);
    }

    /**
     * Create an aliased <code>public.app_annotation_hit_histories</code> table reference
     */
    public AppAnnotationHitHistories(Name alias) {
        this(alias, APP_ANNOTATION_HIT_HISTORIES);
    }

    /**
     * Create a <code>public.app_annotation_hit_histories</code> table reference
     */
    public AppAnnotationHitHistories() {
        this(DSL.name("app_annotation_hit_histories"), null);
    }

    public <O extends Record> AppAnnotationHitHistories(Table<O> child, ForeignKey<O, AppAnnotationHitHistoriesRecord> key) {
        super(child, key, APP_ANNOTATION_HIT_HISTORIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APP_ANNOTATION_HIT_HISTORIES_ACCOUNT_IDX, Indexes.APP_ANNOTATION_HIT_HISTORIES_ANNOTATION_IDX, Indexes.APP_ANNOTATION_HIT_HISTORIES_APP_IDX, Indexes.APP_ANNOTATION_HIT_HISTORIES_MESSAGE_IDX);
    }

    @Override
    public UniqueKey<AppAnnotationHitHistoriesRecord> getPrimaryKey() {
        return Keys.APP_ANNOTATION_HIT_HISTORIES_PKEY;
    }

    @Override
    public List<UniqueKey<AppAnnotationHitHistoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<AppAnnotationHitHistoriesRecord>>asList(Keys.APP_ANNOTATION_HIT_HISTORIES_PKEY);
    }

    @Override
    public AppAnnotationHitHistories as(String alias) {
        return new AppAnnotationHitHistories(DSL.name(alias), this);
    }

    @Override
    public AppAnnotationHitHistories as(Name alias) {
        return new AppAnnotationHitHistories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppAnnotationHitHistories rename(String name) {
        return new AppAnnotationHitHistories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppAnnotationHitHistories rename(Name name) {
        return new AppAnnotationHitHistories(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, UUID, UUID, String, String, UUID, LocalDateTime, Double, UUID, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
