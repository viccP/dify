/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.TenantsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tenants extends TableImpl<TenantsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tenants</code>
     */
    public static final Tenants TENANTS = new Tenants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenantsRecord> getRecordType() {
        return TenantsRecord.class;
    }

    /**
     * The column <code>public.tenants.id</code>.
     */
    public final TableField<TenantsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tenants.name</code>.
     */
    public final TableField<TenantsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tenants.encrypt_public_key</code>.
     */
    public final TableField<TenantsRecord, String> ENCRYPT_PUBLIC_KEY = createField(DSL.name("encrypt_public_key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tenants.plan</code>.
     */
    public final TableField<TenantsRecord, String> PLAN = createField(DSL.name("plan"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'basic'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tenants.status</code>.
     */
    public final TableField<TenantsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'normal'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tenants.created_at</code>.
     */
    public final TableField<TenantsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tenants.updated_at</code>.
     */
    public final TableField<TenantsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tenants.custom_config</code>.
     */
    public final TableField<TenantsRecord, String> CUSTOM_CONFIG = createField(DSL.name("custom_config"), SQLDataType.CLOB, this, "");

    private Tenants(Name alias, Table<TenantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tenants(Name alias, Table<TenantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tenants</code> table reference
     */
    public Tenants(String alias) {
        this(DSL.name(alias), TENANTS);
    }

    /**
     * Create an aliased <code>public.tenants</code> table reference
     */
    public Tenants(Name alias) {
        this(alias, TENANTS);
    }

    /**
     * Create a <code>public.tenants</code> table reference
     */
    public Tenants() {
        this(DSL.name("tenants"), null);
    }

    public <O extends Record> Tenants(Table<O> child, ForeignKey<O, TenantsRecord> key) {
        super(child, key, TENANTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TenantsRecord> getPrimaryKey() {
        return Keys.TENANT_PKEY;
    }

    @Override
    public List<UniqueKey<TenantsRecord>> getKeys() {
        return Arrays.<UniqueKey<TenantsRecord>>asList(Keys.TENANT_PKEY);
    }

    @Override
    public Tenants as(String alias) {
        return new Tenants(DSL.name(alias), this);
    }

    @Override
    public Tenants as(Name alias) {
        return new Tenants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenants rename(String name) {
        return new Tenants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenants rename(Name name) {
        return new Tenants(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
