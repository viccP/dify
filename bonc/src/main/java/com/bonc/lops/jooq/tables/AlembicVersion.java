/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.AlembicVersionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlembicVersion extends TableImpl<AlembicVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.alembic_version</code>
     */
    public static final AlembicVersion ALEMBIC_VERSION = new AlembicVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlembicVersionRecord> getRecordType() {
        return AlembicVersionRecord.class;
    }

    /**
     * The column <code>public.alembic_version.version_num</code>.
     */
    public final TableField<AlembicVersionRecord, String> VERSION_NUM = createField(DSL.name("version_num"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private AlembicVersion(Name alias, Table<AlembicVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlembicVersion(Name alias, Table<AlembicVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.alembic_version</code> table reference
     */
    public AlembicVersion(String alias) {
        this(DSL.name(alias), ALEMBIC_VERSION);
    }

    /**
     * Create an aliased <code>public.alembic_version</code> table reference
     */
    public AlembicVersion(Name alias) {
        this(alias, ALEMBIC_VERSION);
    }

    /**
     * Create a <code>public.alembic_version</code> table reference
     */
    public AlembicVersion() {
        this(DSL.name("alembic_version"), null);
    }

    public <O extends Record> AlembicVersion(Table<O> child, ForeignKey<O, AlembicVersionRecord> key) {
        super(child, key, ALEMBIC_VERSION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AlembicVersionRecord> getPrimaryKey() {
        return Keys.ALEMBIC_VERSION_PKC;
    }

    @Override
    public List<UniqueKey<AlembicVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<AlembicVersionRecord>>asList(Keys.ALEMBIC_VERSION_PKC);
    }

    @Override
    public AlembicVersion as(String alias) {
        return new AlembicVersion(DSL.name(alias), this);
    }

    @Override
    public AlembicVersion as(Name alias) {
        return new AlembicVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlembicVersion rename(String name) {
        return new AlembicVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlembicVersion rename(Name name) {
        return new AlembicVersion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
