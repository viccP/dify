/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DatasetKeywordTablesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetKeywordTables extends TableImpl<DatasetKeywordTablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dataset_keyword_tables</code>
     */
    public static final DatasetKeywordTables DATASET_KEYWORD_TABLES = new DatasetKeywordTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetKeywordTablesRecord> getRecordType() {
        return DatasetKeywordTablesRecord.class;
    }

    /**
     * The column <code>public.dataset_keyword_tables.id</code>.
     */
    public final TableField<DatasetKeywordTablesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.dataset_keyword_tables.dataset_id</code>.
     */
    public final TableField<DatasetKeywordTablesRecord, UUID> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.dataset_keyword_tables.keyword_table</code>.
     */
    public final TableField<DatasetKeywordTablesRecord, String> KEYWORD_TABLE = createField(DSL.name("keyword_table"), SQLDataType.CLOB.nullable(false), this, "");

    private DatasetKeywordTables(Name alias, Table<DatasetKeywordTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetKeywordTables(Name alias, Table<DatasetKeywordTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dataset_keyword_tables</code> table reference
     */
    public DatasetKeywordTables(String alias) {
        this(DSL.name(alias), DATASET_KEYWORD_TABLES);
    }

    /**
     * Create an aliased <code>public.dataset_keyword_tables</code> table reference
     */
    public DatasetKeywordTables(Name alias) {
        this(alias, DATASET_KEYWORD_TABLES);
    }

    /**
     * Create a <code>public.dataset_keyword_tables</code> table reference
     */
    public DatasetKeywordTables() {
        this(DSL.name("dataset_keyword_tables"), null);
    }

    public <O extends Record> DatasetKeywordTables(Table<O> child, ForeignKey<O, DatasetKeywordTablesRecord> key) {
        super(child, key, DATASET_KEYWORD_TABLES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATASET_KEYWORD_TABLE_DATASET_ID_IDX);
    }

    @Override
    public UniqueKey<DatasetKeywordTablesRecord> getPrimaryKey() {
        return Keys.DATASET_KEYWORD_TABLE_PKEY;
    }

    @Override
    public List<UniqueKey<DatasetKeywordTablesRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetKeywordTablesRecord>>asList(Keys.DATASET_KEYWORD_TABLE_PKEY, Keys.DATASET_KEYWORD_TABLES_DATASET_ID_KEY);
    }

    @Override
    public DatasetKeywordTables as(String alias) {
        return new DatasetKeywordTables(DSL.name(alias), this);
    }

    @Override
    public DatasetKeywordTables as(Name alias) {
        return new DatasetKeywordTables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetKeywordTables rename(String name) {
        return new DatasetKeywordTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetKeywordTables rename(Name name) {
        return new DatasetKeywordTables(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
