/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DataSourceBindingsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataSourceBindings extends TableImpl<DataSourceBindingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.data_source_bindings</code>
     */
    public static final DataSourceBindings DATA_SOURCE_BINDINGS = new DataSourceBindings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataSourceBindingsRecord> getRecordType() {
        return DataSourceBindingsRecord.class;
    }

    /**
     * The column <code>public.data_source_bindings.id</code>.
     */
    public final TableField<DataSourceBindingsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.data_source_bindings.tenant_id</code>.
     */
    public final TableField<DataSourceBindingsRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_source_bindings.access_token</code>.
     */
    public final TableField<DataSourceBindingsRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.data_source_bindings.provider</code>.
     */
    public final TableField<DataSourceBindingsRecord, String> PROVIDER = createField(DSL.name("provider"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.data_source_bindings.source_info</code>.
     */
    public final TableField<DataSourceBindingsRecord, JSONB> SOURCE_INFO = createField(DSL.name("source_info"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.data_source_bindings.created_at</code>.
     */
    public final TableField<DataSourceBindingsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.data_source_bindings.updated_at</code>.
     */
    public final TableField<DataSourceBindingsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.data_source_bindings.disabled</code>.
     */
    public final TableField<DataSourceBindingsRecord, Boolean> DISABLED = createField(DSL.name("disabled"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private DataSourceBindings(Name alias, Table<DataSourceBindingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataSourceBindings(Name alias, Table<DataSourceBindingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.data_source_bindings</code> table reference
     */
    public DataSourceBindings(String alias) {
        this(DSL.name(alias), DATA_SOURCE_BINDINGS);
    }

    /**
     * Create an aliased <code>public.data_source_bindings</code> table reference
     */
    public DataSourceBindings(Name alias) {
        this(alias, DATA_SOURCE_BINDINGS);
    }

    /**
     * Create a <code>public.data_source_bindings</code> table reference
     */
    public DataSourceBindings() {
        this(DSL.name("data_source_bindings"), null);
    }

    public <O extends Record> DataSourceBindings(Table<O> child, ForeignKey<O, DataSourceBindingsRecord> key) {
        super(child, key, DATA_SOURCE_BINDINGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SOURCE_BINDING_TENANT_ID_IDX, Indexes.SOURCE_INFO_IDX);
    }

    @Override
    public UniqueKey<DataSourceBindingsRecord> getPrimaryKey() {
        return Keys.SOURCE_BINDING_PKEY;
    }

    @Override
    public List<UniqueKey<DataSourceBindingsRecord>> getKeys() {
        return Arrays.<UniqueKey<DataSourceBindingsRecord>>asList(Keys.SOURCE_BINDING_PKEY);
    }

    @Override
    public DataSourceBindings as(String alias) {
        return new DataSourceBindings(DSL.name(alias), this);
    }

    @Override
    public DataSourceBindings as(Name alias) {
        return new DataSourceBindings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataSourceBindings rename(String name) {
        return new DataSourceBindings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataSourceBindings rename(Name name) {
        return new DataSourceBindings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, String, String, JSONB, LocalDateTime, LocalDateTime, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
