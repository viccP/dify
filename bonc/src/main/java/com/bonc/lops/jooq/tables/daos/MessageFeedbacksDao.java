/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.MessageFeedbacks;
import com.bonc.lops.jooq.tables.records.MessageFeedbacksRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class MessageFeedbacksDao extends DAOImpl<MessageFeedbacksRecord, com.bonc.lops.jooq.tables.pojos.MessageFeedbacks, UUID> {

    /**
     * Create a new MessageFeedbacksDao without any configuration
     */
    public MessageFeedbacksDao() {
        super(MessageFeedbacks.MESSAGE_FEEDBACKS, com.bonc.lops.jooq.tables.pojos.MessageFeedbacks.class);
    }

    /**
     * Create a new MessageFeedbacksDao with an attached configuration
     */
    @Autowired
    public MessageFeedbacksDao(Configuration configuration) {
        super(MessageFeedbacks.MESSAGE_FEEDBACKS, com.bonc.lops.jooq.tables.pojos.MessageFeedbacks.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.MessageFeedbacks object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchById(UUID... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.MessageFeedbacks fetchOneById(UUID value) {
        return fetchOne(MessageFeedbacks.MESSAGE_FEEDBACKS.ID, value);
    }

    /**
     * Fetch records that have <code>app_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfAppId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.APP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>app_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByAppId(UUID... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.APP_ID, values);
    }

    /**
     * Fetch records that have <code>conversation_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfConversationId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.CONVERSATION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>conversation_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByConversationId(UUID... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.CONVERSATION_ID, values);
    }

    /**
     * Fetch records that have <code>message_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfMessageId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.MESSAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>message_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByMessageId(UUID... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.MESSAGE_ID, values);
    }

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfRating(String lowerInclusive, String upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.RATING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByRating(String... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.RATING, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByContent(String... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.CONTENT, values);
    }

    /**
     * Fetch records that have <code>from_source BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfFromSource(String lowerInclusive, String upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.FROM_SOURCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>from_source IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByFromSource(String... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.FROM_SOURCE, values);
    }

    /**
     * Fetch records that have <code>from_end_user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfFromEndUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.FROM_END_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>from_end_user_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByFromEndUserId(UUID... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.FROM_END_USER_ID, values);
    }

    /**
     * Fetch records that have <code>from_account_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfFromAccountId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.FROM_ACCOUNT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>from_account_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByFromAccountId(UUID... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.FROM_ACCOUNT_ID, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(MessageFeedbacks.MESSAGE_FEEDBACKS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.MessageFeedbacks> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(MessageFeedbacks.MESSAGE_FEEDBACKS.UPDATED_AT, values);
    }
}
