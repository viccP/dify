/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.EndUsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EndUsers extends TableImpl<EndUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.end_users</code>
     */
    public static final EndUsers END_USERS = new EndUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EndUsersRecord> getRecordType() {
        return EndUsersRecord.class;
    }

    /**
     * The column <code>public.end_users.id</code>.
     */
    public final TableField<EndUsersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.end_users.tenant_id</code>.
     */
    public final TableField<EndUsersRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.end_users.app_id</code>.
     */
    public final TableField<EndUsersRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.end_users.type</code>.
     */
    public final TableField<EndUsersRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.end_users.external_user_id</code>.
     */
    public final TableField<EndUsersRecord, String> EXTERNAL_USER_ID = createField(DSL.name("external_user_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.end_users.name</code>.
     */
    public final TableField<EndUsersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.end_users.is_anonymous</code>.
     */
    public final TableField<EndUsersRecord, Boolean> IS_ANONYMOUS = createField(DSL.name("is_anonymous"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.end_users.session_id</code>.
     */
    public final TableField<EndUsersRecord, String> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.end_users.created_at</code>.
     */
    public final TableField<EndUsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.end_users.updated_at</code>.
     */
    public final TableField<EndUsersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private EndUsers(Name alias, Table<EndUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private EndUsers(Name alias, Table<EndUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.end_users</code> table reference
     */
    public EndUsers(String alias) {
        this(DSL.name(alias), END_USERS);
    }

    /**
     * Create an aliased <code>public.end_users</code> table reference
     */
    public EndUsers(Name alias) {
        this(alias, END_USERS);
    }

    /**
     * Create a <code>public.end_users</code> table reference
     */
    public EndUsers() {
        this(DSL.name("end_users"), null);
    }

    public <O extends Record> EndUsers(Table<O> child, ForeignKey<O, EndUsersRecord> key) {
        super(child, key, END_USERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.END_USER_SESSION_ID_IDX, Indexes.END_USER_TENANT_SESSION_ID_IDX);
    }

    @Override
    public UniqueKey<EndUsersRecord> getPrimaryKey() {
        return Keys.END_USER_PKEY;
    }

    @Override
    public List<UniqueKey<EndUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<EndUsersRecord>>asList(Keys.END_USER_PKEY);
    }

    @Override
    public EndUsers as(String alias) {
        return new EndUsers(DSL.name(alias), this);
    }

    @Override
    public EndUsers as(Name alias) {
        return new EndUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EndUsers rename(String name) {
        return new EndUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EndUsers rename(Name name) {
        return new EndUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, UUID, String, String, String, Boolean, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
