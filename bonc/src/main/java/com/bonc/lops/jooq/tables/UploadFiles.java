/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.UploadFilesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UploadFiles extends TableImpl<UploadFilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.upload_files</code>
     */
    public static final UploadFiles UPLOAD_FILES = new UploadFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UploadFilesRecord> getRecordType() {
        return UploadFilesRecord.class;
    }

    /**
     * The column <code>public.upload_files.id</code>.
     */
    public final TableField<UploadFilesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.upload_files.tenant_id</code>.
     */
    public final TableField<UploadFilesRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.upload_files.storage_type</code>.
     */
    public final TableField<UploadFilesRecord, String> STORAGE_TYPE = createField(DSL.name("storage_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.upload_files.key</code>.
     */
    public final TableField<UploadFilesRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.upload_files.name</code>.
     */
    public final TableField<UploadFilesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.upload_files.size</code>.
     */
    public final TableField<UploadFilesRecord, Integer> SIZE = createField(DSL.name("size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.upload_files.extension</code>.
     */
    public final TableField<UploadFilesRecord, String> EXTENSION = createField(DSL.name("extension"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.upload_files.mime_type</code>.
     */
    public final TableField<UploadFilesRecord, String> MIME_TYPE = createField(DSL.name("mime_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.upload_files.created_by</code>.
     */
    public final TableField<UploadFilesRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.upload_files.created_at</code>.
     */
    public final TableField<UploadFilesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.upload_files.used</code>.
     */
    public final TableField<UploadFilesRecord, Boolean> USED = createField(DSL.name("used"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.upload_files.used_by</code>.
     */
    public final TableField<UploadFilesRecord, UUID> USED_BY = createField(DSL.name("used_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.upload_files.used_at</code>.
     */
    public final TableField<UploadFilesRecord, LocalDateTime> USED_AT = createField(DSL.name("used_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.upload_files.hash</code>.
     */
    public final TableField<UploadFilesRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.upload_files.created_by_role</code>.
     */
    public final TableField<UploadFilesRecord, String> CREATED_BY_ROLE = createField(DSL.name("created_by_role"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'account'::character varying", SQLDataType.VARCHAR)), this, "");

    private UploadFiles(Name alias, Table<UploadFilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UploadFiles(Name alias, Table<UploadFilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.upload_files</code> table reference
     */
    public UploadFiles(String alias) {
        this(DSL.name(alias), UPLOAD_FILES);
    }

    /**
     * Create an aliased <code>public.upload_files</code> table reference
     */
    public UploadFiles(Name alias) {
        this(alias, UPLOAD_FILES);
    }

    /**
     * Create a <code>public.upload_files</code> table reference
     */
    public UploadFiles() {
        this(DSL.name("upload_files"), null);
    }

    public <O extends Record> UploadFiles(Table<O> child, ForeignKey<O, UploadFilesRecord> key) {
        super(child, key, UPLOAD_FILES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UPLOAD_FILE_TENANT_IDX);
    }

    @Override
    public UniqueKey<UploadFilesRecord> getPrimaryKey() {
        return Keys.UPLOAD_FILE_PKEY;
    }

    @Override
    public List<UniqueKey<UploadFilesRecord>> getKeys() {
        return Arrays.<UniqueKey<UploadFilesRecord>>asList(Keys.UPLOAD_FILE_PKEY);
    }

    @Override
    public UploadFiles as(String alias) {
        return new UploadFiles(DSL.name(alias), this);
    }

    @Override
    public UploadFiles as(Name alias) {
        return new UploadFiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UploadFiles rename(String name) {
        return new UploadFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UploadFiles rename(Name name) {
        return new UploadFiles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, UUID, String, String, String, Integer, String, String, UUID, LocalDateTime, Boolean, UUID, LocalDateTime, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
