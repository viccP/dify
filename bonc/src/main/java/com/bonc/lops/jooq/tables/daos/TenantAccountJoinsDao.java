/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.TenantAccountJoins;
import com.bonc.lops.jooq.tables.records.TenantAccountJoinsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TenantAccountJoinsDao extends DAOImpl<TenantAccountJoinsRecord, com.bonc.lops.jooq.tables.pojos.TenantAccountJoins, UUID> {

    /**
     * Create a new TenantAccountJoinsDao without any configuration
     */
    public TenantAccountJoinsDao() {
        super(TenantAccountJoins.TENANT_ACCOUNT_JOINS, com.bonc.lops.jooq.tables.pojos.TenantAccountJoins.class);
    }

    /**
     * Create a new TenantAccountJoinsDao with an attached configuration
     */
    @Autowired
    public TenantAccountJoinsDao(Configuration configuration) {
        super(TenantAccountJoins.TENANT_ACCOUNT_JOINS, com.bonc.lops.jooq.tables.pojos.TenantAccountJoins.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.TenantAccountJoins object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TenantAccountJoins.TENANT_ACCOUNT_JOINS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchById(UUID... values) {
        return fetch(TenantAccountJoins.TENANT_ACCOUNT_JOINS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.TenantAccountJoins fetchOneById(UUID value) {
        return fetchOne(TenantAccountJoins.TENANT_ACCOUNT_JOINS.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchRangeOfTenantId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TenantAccountJoins.TENANT_ACCOUNT_JOINS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchByTenantId(UUID... values) {
        return fetch(TenantAccountJoins.TENANT_ACCOUNT_JOINS.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>account_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchRangeOfAccountId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TenantAccountJoins.TENANT_ACCOUNT_JOINS.ACCOUNT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchByAccountId(UUID... values) {
        return fetch(TenantAccountJoins.TENANT_ACCOUNT_JOINS.ACCOUNT_ID, values);
    }

    /**
     * Fetch records that have <code>role BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchRangeOfRole(String lowerInclusive, String upperInclusive) {
        return fetchRange(TenantAccountJoins.TENANT_ACCOUNT_JOINS.ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchByRole(String... values) {
        return fetch(TenantAccountJoins.TENANT_ACCOUNT_JOINS.ROLE, values);
    }

    /**
     * Fetch records that have <code>invited_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchRangeOfInvitedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TenantAccountJoins.TENANT_ACCOUNT_JOINS.INVITED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>invited_by IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchByInvitedBy(UUID... values) {
        return fetch(TenantAccountJoins.TENANT_ACCOUNT_JOINS.INVITED_BY, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TenantAccountJoins.TENANT_ACCOUNT_JOINS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(TenantAccountJoins.TENANT_ACCOUNT_JOINS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TenantAccountJoins.TENANT_ACCOUNT_JOINS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(TenantAccountJoins.TENANT_ACCOUNT_JOINS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>current BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchRangeOfCurrent(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(TenantAccountJoins.TENANT_ACCOUNT_JOINS.CURRENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>current IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.TenantAccountJoins> fetchByCurrent(Boolean... values) {
        return fetch(TenantAccountJoins.TENANT_ACCOUNT_JOINS.CURRENT, values);
    }
}
