/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.Accounts;
import com.bonc.lops.jooq.tables.records.AccountsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AccountsDao extends DAOImpl<AccountsRecord, com.bonc.lops.jooq.tables.pojos.Accounts, UUID> {

    /**
     * Create a new AccountsDao without any configuration
     */
    public AccountsDao() {
        super(Accounts.ACCOUNTS, com.bonc.lops.jooq.tables.pojos.Accounts.class);
    }

    /**
     * Create a new AccountsDao with an attached configuration
     */
    @Autowired
    public AccountsDao(Configuration configuration) {
        super(Accounts.ACCOUNTS, com.bonc.lops.jooq.tables.pojos.Accounts.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.Accounts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchById(UUID... values) {
        return fetch(Accounts.ACCOUNTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.Accounts fetchOneById(UUID value) {
        return fetchOne(Accounts.ACCOUNTS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByName(String... values) {
        return fetch(Accounts.ACCOUNTS.NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByEmail(String... values) {
        return fetch(Accounts.ACCOUNTS.EMAIL, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByPassword(String... values) {
        return fetch(Accounts.ACCOUNTS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>password_salt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfPasswordSalt(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.PASSWORD_SALT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password_salt IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByPasswordSalt(String... values) {
        return fetch(Accounts.ACCOUNTS.PASSWORD_SALT, values);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.AVATAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByAvatar(String... values) {
        return fetch(Accounts.ACCOUNTS.AVATAR, values);
    }

    /**
     * Fetch records that have <code>interface_language BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfInterfaceLanguage(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.INTERFACE_LANGUAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>interface_language IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByInterfaceLanguage(String... values) {
        return fetch(Accounts.ACCOUNTS.INTERFACE_LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>interface_theme BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfInterfaceTheme(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.INTERFACE_THEME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>interface_theme IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByInterfaceTheme(String... values) {
        return fetch(Accounts.ACCOUNTS.INTERFACE_THEME, values);
    }

    /**
     * Fetch records that have <code>timezone BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfTimezone(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.TIMEZONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timezone IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByTimezone(String... values) {
        return fetch(Accounts.ACCOUNTS.TIMEZONE, values);
    }

    /**
     * Fetch records that have <code>last_login_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfLastLoginAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.LAST_LOGIN_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_login_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByLastLoginAt(LocalDateTime... values) {
        return fetch(Accounts.ACCOUNTS.LAST_LOGIN_AT, values);
    }

    /**
     * Fetch records that have <code>last_login_ip BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfLastLoginIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.LAST_LOGIN_IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_login_ip IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByLastLoginIp(String... values) {
        return fetch(Accounts.ACCOUNTS.LAST_LOGIN_IP, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByStatus(String... values) {
        return fetch(Accounts.ACCOUNTS.STATUS, values);
    }

    /**
     * Fetch records that have <code>initialized_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfInitializedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.INITIALIZED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>initialized_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByInitializedAt(LocalDateTime... values) {
        return fetch(Accounts.ACCOUNTS.INITIALIZED_AT, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Accounts.ACCOUNTS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Accounts.ACCOUNTS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>last_active_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchRangeOfLastActiveAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.LAST_ACTIVE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_active_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Accounts> fetchByLastActiveAt(LocalDateTime... values) {
        return fetch(Accounts.ACCOUNTS.LAST_ACTIVE_AT, values);
    }
}
