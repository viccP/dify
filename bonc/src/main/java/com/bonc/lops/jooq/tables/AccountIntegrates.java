/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.AccountIntegratesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountIntegrates extends TableImpl<AccountIntegratesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_integrates</code>
     */
    public static final AccountIntegrates ACCOUNT_INTEGRATES = new AccountIntegrates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountIntegratesRecord> getRecordType() {
        return AccountIntegratesRecord.class;
    }

    /**
     * The column <code>public.account_integrates.id</code>.
     */
    public final TableField<AccountIntegratesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.account_integrates.account_id</code>.
     */
    public final TableField<AccountIntegratesRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.account_integrates.provider</code>.
     */
    public final TableField<AccountIntegratesRecord, String> PROVIDER = createField(DSL.name("provider"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.account_integrates.open_id</code>.
     */
    public final TableField<AccountIntegratesRecord, String> OPEN_ID = createField(DSL.name("open_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.account_integrates.encrypted_token</code>.
     */
    public final TableField<AccountIntegratesRecord, String> ENCRYPTED_TOKEN = createField(DSL.name("encrypted_token"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.account_integrates.created_at</code>.
     */
    public final TableField<AccountIntegratesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.account_integrates.updated_at</code>.
     */
    public final TableField<AccountIntegratesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private AccountIntegrates(Name alias, Table<AccountIntegratesRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountIntegrates(Name alias, Table<AccountIntegratesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.account_integrates</code> table reference
     */
    public AccountIntegrates(String alias) {
        this(DSL.name(alias), ACCOUNT_INTEGRATES);
    }

    /**
     * Create an aliased <code>public.account_integrates</code> table reference
     */
    public AccountIntegrates(Name alias) {
        this(alias, ACCOUNT_INTEGRATES);
    }

    /**
     * Create a <code>public.account_integrates</code> table reference
     */
    public AccountIntegrates() {
        this(DSL.name("account_integrates"), null);
    }

    public <O extends Record> AccountIntegrates(Table<O> child, ForeignKey<O, AccountIntegratesRecord> key) {
        super(child, key, ACCOUNT_INTEGRATES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountIntegratesRecord> getPrimaryKey() {
        return Keys.ACCOUNT_INTEGRATE_PKEY;
    }

    @Override
    public List<UniqueKey<AccountIntegratesRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountIntegratesRecord>>asList(Keys.ACCOUNT_INTEGRATE_PKEY, Keys.UNIQUE_ACCOUNT_PROVIDER, Keys.UNIQUE_PROVIDER_OPEN_ID);
    }

    @Override
    public AccountIntegrates as(String alias) {
        return new AccountIntegrates(DSL.name(alias), this);
    }

    @Override
    public AccountIntegrates as(Name alias) {
        return new AccountIntegrates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountIntegrates rename(String name) {
        return new AccountIntegrates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountIntegrates rename(Name name) {
        return new AccountIntegrates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
