/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq;


import com.bonc.lops.jooq.tables.AccountIntegrates;
import com.bonc.lops.jooq.tables.Accounts;
import com.bonc.lops.jooq.tables.AlembicVersion;
import com.bonc.lops.jooq.tables.ApiBasedExtensions;
import com.bonc.lops.jooq.tables.ApiRequests;
import com.bonc.lops.jooq.tables.ApiTokens;
import com.bonc.lops.jooq.tables.AppAnnotationHitHistories;
import com.bonc.lops.jooq.tables.AppAnnotationSettings;
import com.bonc.lops.jooq.tables.AppDatasetJoins;
import com.bonc.lops.jooq.tables.AppModelConfigs;
import com.bonc.lops.jooq.tables.Apps;
import com.bonc.lops.jooq.tables.CeleryTaskmeta;
import com.bonc.lops.jooq.tables.CeleryTasksetmeta;
import com.bonc.lops.jooq.tables.Conversations;
import com.bonc.lops.jooq.tables.DataSourceBindings;
import com.bonc.lops.jooq.tables.DatasetCollectionBindings;
import com.bonc.lops.jooq.tables.DatasetKeywordTables;
import com.bonc.lops.jooq.tables.DatasetProcessRules;
import com.bonc.lops.jooq.tables.DatasetQueries;
import com.bonc.lops.jooq.tables.DatasetRetrieverResources;
import com.bonc.lops.jooq.tables.Datasets;
import com.bonc.lops.jooq.tables.DifySetups;
import com.bonc.lops.jooq.tables.DocumentSegments;
import com.bonc.lops.jooq.tables.Documents;
import com.bonc.lops.jooq.tables.Embeddings;
import com.bonc.lops.jooq.tables.EndUsers;
import com.bonc.lops.jooq.tables.InstalledApps;
import com.bonc.lops.jooq.tables.InvitationCodes;
import com.bonc.lops.jooq.tables.MessageAgentThoughts;
import com.bonc.lops.jooq.tables.MessageAnnotations;
import com.bonc.lops.jooq.tables.MessageChains;
import com.bonc.lops.jooq.tables.MessageFeedbacks;
import com.bonc.lops.jooq.tables.MessageFiles;
import com.bonc.lops.jooq.tables.Messages;
import com.bonc.lops.jooq.tables.OperationLogs;
import com.bonc.lops.jooq.tables.PinnedConversations;
import com.bonc.lops.jooq.tables.ProviderModels;
import com.bonc.lops.jooq.tables.ProviderOrders;
import com.bonc.lops.jooq.tables.Providers;
import com.bonc.lops.jooq.tables.RecommendedApps;
import com.bonc.lops.jooq.tables.SavedMessages;
import com.bonc.lops.jooq.tables.Sites;
import com.bonc.lops.jooq.tables.TenantAccountJoins;
import com.bonc.lops.jooq.tables.TenantDefaultModels;
import com.bonc.lops.jooq.tables.TenantPreferredModelProviders;
import com.bonc.lops.jooq.tables.Tenants;
import com.bonc.lops.jooq.tables.ToolApiProviders;
import com.bonc.lops.jooq.tables.ToolBuiltinProviders;
import com.bonc.lops.jooq.tables.ToolConversationVariables;
import com.bonc.lops.jooq.tables.ToolFiles;
import com.bonc.lops.jooq.tables.ToolModelInvokes;
import com.bonc.lops.jooq.tables.ToolProviders;
import com.bonc.lops.jooq.tables.ToolPublishedApps;
import com.bonc.lops.jooq.tables.UploadFiles;
import com.bonc.lops.jooq.tables.WorkflowAppLogs;
import com.bonc.lops.jooq.tables.WorkflowNodeExecutions;
import com.bonc.lops.jooq.tables.WorkflowRuns;
import com.bonc.lops.jooq.tables.Workflows;
import com.bonc.lops.jooq.tables.records.AccountIntegratesRecord;
import com.bonc.lops.jooq.tables.records.AccountsRecord;
import com.bonc.lops.jooq.tables.records.AlembicVersionRecord;
import com.bonc.lops.jooq.tables.records.ApiBasedExtensionsRecord;
import com.bonc.lops.jooq.tables.records.ApiRequestsRecord;
import com.bonc.lops.jooq.tables.records.ApiTokensRecord;
import com.bonc.lops.jooq.tables.records.AppAnnotationHitHistoriesRecord;
import com.bonc.lops.jooq.tables.records.AppAnnotationSettingsRecord;
import com.bonc.lops.jooq.tables.records.AppDatasetJoinsRecord;
import com.bonc.lops.jooq.tables.records.AppModelConfigsRecord;
import com.bonc.lops.jooq.tables.records.AppsRecord;
import com.bonc.lops.jooq.tables.records.CeleryTaskmetaRecord;
import com.bonc.lops.jooq.tables.records.CeleryTasksetmetaRecord;
import com.bonc.lops.jooq.tables.records.ConversationsRecord;
import com.bonc.lops.jooq.tables.records.DataSourceBindingsRecord;
import com.bonc.lops.jooq.tables.records.DatasetCollectionBindingsRecord;
import com.bonc.lops.jooq.tables.records.DatasetKeywordTablesRecord;
import com.bonc.lops.jooq.tables.records.DatasetProcessRulesRecord;
import com.bonc.lops.jooq.tables.records.DatasetQueriesRecord;
import com.bonc.lops.jooq.tables.records.DatasetRetrieverResourcesRecord;
import com.bonc.lops.jooq.tables.records.DatasetsRecord;
import com.bonc.lops.jooq.tables.records.DifySetupsRecord;
import com.bonc.lops.jooq.tables.records.DocumentSegmentsRecord;
import com.bonc.lops.jooq.tables.records.DocumentsRecord;
import com.bonc.lops.jooq.tables.records.EmbeddingsRecord;
import com.bonc.lops.jooq.tables.records.EndUsersRecord;
import com.bonc.lops.jooq.tables.records.InstalledAppsRecord;
import com.bonc.lops.jooq.tables.records.InvitationCodesRecord;
import com.bonc.lops.jooq.tables.records.MessageAgentThoughtsRecord;
import com.bonc.lops.jooq.tables.records.MessageAnnotationsRecord;
import com.bonc.lops.jooq.tables.records.MessageChainsRecord;
import com.bonc.lops.jooq.tables.records.MessageFeedbacksRecord;
import com.bonc.lops.jooq.tables.records.MessageFilesRecord;
import com.bonc.lops.jooq.tables.records.MessagesRecord;
import com.bonc.lops.jooq.tables.records.OperationLogsRecord;
import com.bonc.lops.jooq.tables.records.PinnedConversationsRecord;
import com.bonc.lops.jooq.tables.records.ProviderModelsRecord;
import com.bonc.lops.jooq.tables.records.ProviderOrdersRecord;
import com.bonc.lops.jooq.tables.records.ProvidersRecord;
import com.bonc.lops.jooq.tables.records.RecommendedAppsRecord;
import com.bonc.lops.jooq.tables.records.SavedMessagesRecord;
import com.bonc.lops.jooq.tables.records.SitesRecord;
import com.bonc.lops.jooq.tables.records.TenantAccountJoinsRecord;
import com.bonc.lops.jooq.tables.records.TenantDefaultModelsRecord;
import com.bonc.lops.jooq.tables.records.TenantPreferredModelProvidersRecord;
import com.bonc.lops.jooq.tables.records.TenantsRecord;
import com.bonc.lops.jooq.tables.records.ToolApiProvidersRecord;
import com.bonc.lops.jooq.tables.records.ToolBuiltinProvidersRecord;
import com.bonc.lops.jooq.tables.records.ToolConversationVariablesRecord;
import com.bonc.lops.jooq.tables.records.ToolFilesRecord;
import com.bonc.lops.jooq.tables.records.ToolModelInvokesRecord;
import com.bonc.lops.jooq.tables.records.ToolProvidersRecord;
import com.bonc.lops.jooq.tables.records.ToolPublishedAppsRecord;
import com.bonc.lops.jooq.tables.records.UploadFilesRecord;
import com.bonc.lops.jooq.tables.records.WorkflowAppLogsRecord;
import com.bonc.lops.jooq.tables.records.WorkflowNodeExecutionsRecord;
import com.bonc.lops.jooq.tables.records.WorkflowRunsRecord;
import com.bonc.lops.jooq.tables.records.WorkflowsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountIntegratesRecord> ACCOUNT_INTEGRATE_PKEY = Internal.createUniqueKey(AccountIntegrates.ACCOUNT_INTEGRATES, DSL.name("account_integrate_pkey"), new TableField[] { AccountIntegrates.ACCOUNT_INTEGRATES.ID }, true);
    public static final UniqueKey<AccountIntegratesRecord> UNIQUE_ACCOUNT_PROVIDER = Internal.createUniqueKey(AccountIntegrates.ACCOUNT_INTEGRATES, DSL.name("unique_account_provider"), new TableField[] { AccountIntegrates.ACCOUNT_INTEGRATES.ACCOUNT_ID, AccountIntegrates.ACCOUNT_INTEGRATES.PROVIDER }, true);
    public static final UniqueKey<AccountIntegratesRecord> UNIQUE_PROVIDER_OPEN_ID = Internal.createUniqueKey(AccountIntegrates.ACCOUNT_INTEGRATES, DSL.name("unique_provider_open_id"), new TableField[] { AccountIntegrates.ACCOUNT_INTEGRATES.PROVIDER, AccountIntegrates.ACCOUNT_INTEGRATES.OPEN_ID }, true);
    public static final UniqueKey<AccountsRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Accounts.ACCOUNTS, DSL.name("account_pkey"), new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final UniqueKey<AlembicVersionRecord> ALEMBIC_VERSION_PKC = Internal.createUniqueKey(AlembicVersion.ALEMBIC_VERSION, DSL.name("alembic_version_pkc"), new TableField[] { AlembicVersion.ALEMBIC_VERSION.VERSION_NUM }, true);
    public static final UniqueKey<ApiBasedExtensionsRecord> API_BASED_EXTENSION_PKEY = Internal.createUniqueKey(ApiBasedExtensions.API_BASED_EXTENSIONS, DSL.name("api_based_extension_pkey"), new TableField[] { ApiBasedExtensions.API_BASED_EXTENSIONS.ID }, true);
    public static final UniqueKey<ApiRequestsRecord> API_REQUEST_PKEY = Internal.createUniqueKey(ApiRequests.API_REQUESTS, DSL.name("api_request_pkey"), new TableField[] { ApiRequests.API_REQUESTS.ID }, true);
    public static final UniqueKey<ApiTokensRecord> API_TOKEN_PKEY = Internal.createUniqueKey(ApiTokens.API_TOKENS, DSL.name("api_token_pkey"), new TableField[] { ApiTokens.API_TOKENS.ID }, true);
    public static final UniqueKey<AppAnnotationHitHistoriesRecord> APP_ANNOTATION_HIT_HISTORIES_PKEY = Internal.createUniqueKey(AppAnnotationHitHistories.APP_ANNOTATION_HIT_HISTORIES, DSL.name("app_annotation_hit_histories_pkey"), new TableField[] { AppAnnotationHitHistories.APP_ANNOTATION_HIT_HISTORIES.ID }, true);
    public static final UniqueKey<AppAnnotationSettingsRecord> APP_ANNOTATION_SETTINGS_PKEY = Internal.createUniqueKey(AppAnnotationSettings.APP_ANNOTATION_SETTINGS, DSL.name("app_annotation_settings_pkey"), new TableField[] { AppAnnotationSettings.APP_ANNOTATION_SETTINGS.ID }, true);
    public static final UniqueKey<AppDatasetJoinsRecord> APP_DATASET_JOIN_PKEY = Internal.createUniqueKey(AppDatasetJoins.APP_DATASET_JOINS, DSL.name("app_dataset_join_pkey"), new TableField[] { AppDatasetJoins.APP_DATASET_JOINS.ID }, true);
    public static final UniqueKey<AppModelConfigsRecord> APP_MODEL_CONFIG_PKEY = Internal.createUniqueKey(AppModelConfigs.APP_MODEL_CONFIGS, DSL.name("app_model_config_pkey"), new TableField[] { AppModelConfigs.APP_MODEL_CONFIGS.ID }, true);
    public static final UniqueKey<AppsRecord> APP_PKEY = Internal.createUniqueKey(Apps.APPS, DSL.name("app_pkey"), new TableField[] { Apps.APPS.ID }, true);
    public static final UniqueKey<CeleryTaskmetaRecord> CELERY_TASKMETA_PKEY = Internal.createUniqueKey(CeleryTaskmeta.CELERY_TASKMETA, DSL.name("celery_taskmeta_pkey"), new TableField[] { CeleryTaskmeta.CELERY_TASKMETA.ID }, true);
    public static final UniqueKey<CeleryTaskmetaRecord> CELERY_TASKMETA_TASK_ID_KEY = Internal.createUniqueKey(CeleryTaskmeta.CELERY_TASKMETA, DSL.name("celery_taskmeta_task_id_key"), new TableField[] { CeleryTaskmeta.CELERY_TASKMETA.TASK_ID }, true);
    public static final UniqueKey<CeleryTasksetmetaRecord> CELERY_TASKSETMETA_PKEY = Internal.createUniqueKey(CeleryTasksetmeta.CELERY_TASKSETMETA, DSL.name("celery_tasksetmeta_pkey"), new TableField[] { CeleryTasksetmeta.CELERY_TASKSETMETA.ID }, true);
    public static final UniqueKey<CeleryTasksetmetaRecord> CELERY_TASKSETMETA_TASKSET_ID_KEY = Internal.createUniqueKey(CeleryTasksetmeta.CELERY_TASKSETMETA, DSL.name("celery_tasksetmeta_taskset_id_key"), new TableField[] { CeleryTasksetmeta.CELERY_TASKSETMETA.TASKSET_ID }, true);
    public static final UniqueKey<ConversationsRecord> CONVERSATION_PKEY = Internal.createUniqueKey(Conversations.CONVERSATIONS, DSL.name("conversation_pkey"), new TableField[] { Conversations.CONVERSATIONS.ID }, true);
    public static final UniqueKey<DataSourceBindingsRecord> SOURCE_BINDING_PKEY = Internal.createUniqueKey(DataSourceBindings.DATA_SOURCE_BINDINGS, DSL.name("source_binding_pkey"), new TableField[] { DataSourceBindings.DATA_SOURCE_BINDINGS.ID }, true);
    public static final UniqueKey<DatasetCollectionBindingsRecord> DATASET_COLLECTION_BINDINGS_PKEY = Internal.createUniqueKey(DatasetCollectionBindings.DATASET_COLLECTION_BINDINGS, DSL.name("dataset_collection_bindings_pkey"), new TableField[] { DatasetCollectionBindings.DATASET_COLLECTION_BINDINGS.ID }, true);
    public static final UniqueKey<DatasetKeywordTablesRecord> DATASET_KEYWORD_TABLE_PKEY = Internal.createUniqueKey(DatasetKeywordTables.DATASET_KEYWORD_TABLES, DSL.name("dataset_keyword_table_pkey"), new TableField[] { DatasetKeywordTables.DATASET_KEYWORD_TABLES.ID }, true);
    public static final UniqueKey<DatasetKeywordTablesRecord> DATASET_KEYWORD_TABLES_DATASET_ID_KEY = Internal.createUniqueKey(DatasetKeywordTables.DATASET_KEYWORD_TABLES, DSL.name("dataset_keyword_tables_dataset_id_key"), new TableField[] { DatasetKeywordTables.DATASET_KEYWORD_TABLES.DATASET_ID }, true);
    public static final UniqueKey<DatasetProcessRulesRecord> DATASET_PROCESS_RULE_PKEY = Internal.createUniqueKey(DatasetProcessRules.DATASET_PROCESS_RULES, DSL.name("dataset_process_rule_pkey"), new TableField[] { DatasetProcessRules.DATASET_PROCESS_RULES.ID }, true);
    public static final UniqueKey<DatasetQueriesRecord> DATASET_QUERY_PKEY = Internal.createUniqueKey(DatasetQueries.DATASET_QUERIES, DSL.name("dataset_query_pkey"), new TableField[] { DatasetQueries.DATASET_QUERIES.ID }, true);
    public static final UniqueKey<DatasetRetrieverResourcesRecord> DATASET_RETRIEVER_RESOURCE_PKEY = Internal.createUniqueKey(DatasetRetrieverResources.DATASET_RETRIEVER_RESOURCES, DSL.name("dataset_retriever_resource_pkey"), new TableField[] { DatasetRetrieverResources.DATASET_RETRIEVER_RESOURCES.ID }, true);
    public static final UniqueKey<DatasetsRecord> DATASET_PKEY = Internal.createUniqueKey(Datasets.DATASETS, DSL.name("dataset_pkey"), new TableField[] { Datasets.DATASETS.ID }, true);
    public static final UniqueKey<DifySetupsRecord> DIFY_SETUP_PKEY = Internal.createUniqueKey(DifySetups.DIFY_SETUPS, DSL.name("dify_setup_pkey"), new TableField[] { DifySetups.DIFY_SETUPS.VERSION }, true);
    public static final UniqueKey<DocumentSegmentsRecord> DOCUMENT_SEGMENT_PKEY = Internal.createUniqueKey(DocumentSegments.DOCUMENT_SEGMENTS, DSL.name("document_segment_pkey"), new TableField[] { DocumentSegments.DOCUMENT_SEGMENTS.ID }, true);
    public static final UniqueKey<DocumentsRecord> DOCUMENT_PKEY = Internal.createUniqueKey(Documents.DOCUMENTS, DSL.name("document_pkey"), new TableField[] { Documents.DOCUMENTS.ID }, true);
    public static final UniqueKey<EmbeddingsRecord> EMBEDDING_HASH_IDX = Internal.createUniqueKey(Embeddings.EMBEDDINGS, DSL.name("embedding_hash_idx"), new TableField[] { Embeddings.EMBEDDINGS.MODEL_NAME, Embeddings.EMBEDDINGS.HASH }, true);
    public static final UniqueKey<EmbeddingsRecord> EMBEDDING_PKEY = Internal.createUniqueKey(Embeddings.EMBEDDINGS, DSL.name("embedding_pkey"), new TableField[] { Embeddings.EMBEDDINGS.ID }, true);
    public static final UniqueKey<EndUsersRecord> END_USER_PKEY = Internal.createUniqueKey(EndUsers.END_USERS, DSL.name("end_user_pkey"), new TableField[] { EndUsers.END_USERS.ID }, true);
    public static final UniqueKey<InstalledAppsRecord> INSTALLED_APP_PKEY = Internal.createUniqueKey(InstalledApps.INSTALLED_APPS, DSL.name("installed_app_pkey"), new TableField[] { InstalledApps.INSTALLED_APPS.ID }, true);
    public static final UniqueKey<InstalledAppsRecord> UNIQUE_TENANT_APP = Internal.createUniqueKey(InstalledApps.INSTALLED_APPS, DSL.name("unique_tenant_app"), new TableField[] { InstalledApps.INSTALLED_APPS.TENANT_ID, InstalledApps.INSTALLED_APPS.APP_ID }, true);
    public static final UniqueKey<InvitationCodesRecord> INVITATION_CODE_PKEY = Internal.createUniqueKey(InvitationCodes.INVITATION_CODES, DSL.name("invitation_code_pkey"), new TableField[] { InvitationCodes.INVITATION_CODES.ID }, true);
    public static final UniqueKey<MessageAgentThoughtsRecord> MESSAGE_AGENT_THOUGHT_PKEY = Internal.createUniqueKey(MessageAgentThoughts.MESSAGE_AGENT_THOUGHTS, DSL.name("message_agent_thought_pkey"), new TableField[] { MessageAgentThoughts.MESSAGE_AGENT_THOUGHTS.ID }, true);
    public static final UniqueKey<MessageAnnotationsRecord> MESSAGE_ANNOTATION_PKEY = Internal.createUniqueKey(MessageAnnotations.MESSAGE_ANNOTATIONS, DSL.name("message_annotation_pkey"), new TableField[] { MessageAnnotations.MESSAGE_ANNOTATIONS.ID }, true);
    public static final UniqueKey<MessageChainsRecord> MESSAGE_CHAIN_PKEY = Internal.createUniqueKey(MessageChains.MESSAGE_CHAINS, DSL.name("message_chain_pkey"), new TableField[] { MessageChains.MESSAGE_CHAINS.ID }, true);
    public static final UniqueKey<MessageFeedbacksRecord> MESSAGE_FEEDBACK_PKEY = Internal.createUniqueKey(MessageFeedbacks.MESSAGE_FEEDBACKS, DSL.name("message_feedback_pkey"), new TableField[] { MessageFeedbacks.MESSAGE_FEEDBACKS.ID }, true);
    public static final UniqueKey<MessageFilesRecord> MESSAGE_FILE_PKEY = Internal.createUniqueKey(MessageFiles.MESSAGE_FILES, DSL.name("message_file_pkey"), new TableField[] { MessageFiles.MESSAGE_FILES.ID }, true);
    public static final UniqueKey<MessagesRecord> MESSAGE_PKEY = Internal.createUniqueKey(Messages.MESSAGES, DSL.name("message_pkey"), new TableField[] { Messages.MESSAGES.ID }, true);
    public static final UniqueKey<OperationLogsRecord> OPERATION_LOG_PKEY = Internal.createUniqueKey(OperationLogs.OPERATION_LOGS, DSL.name("operation_log_pkey"), new TableField[] { OperationLogs.OPERATION_LOGS.ID }, true);
    public static final UniqueKey<PinnedConversationsRecord> PINNED_CONVERSATION_PKEY = Internal.createUniqueKey(PinnedConversations.PINNED_CONVERSATIONS, DSL.name("pinned_conversation_pkey"), new TableField[] { PinnedConversations.PINNED_CONVERSATIONS.ID }, true);
    public static final UniqueKey<ProviderModelsRecord> PROVIDER_MODEL_PKEY = Internal.createUniqueKey(ProviderModels.PROVIDER_MODELS, DSL.name("provider_model_pkey"), new TableField[] { ProviderModels.PROVIDER_MODELS.ID }, true);
    public static final UniqueKey<ProviderModelsRecord> UNIQUE_PROVIDER_MODEL_NAME = Internal.createUniqueKey(ProviderModels.PROVIDER_MODELS, DSL.name("unique_provider_model_name"), new TableField[] { ProviderModels.PROVIDER_MODELS.TENANT_ID, ProviderModels.PROVIDER_MODELS.PROVIDER_NAME, ProviderModels.PROVIDER_MODELS.MODEL_NAME, ProviderModels.PROVIDER_MODELS.MODEL_TYPE }, true);
    public static final UniqueKey<ProviderOrdersRecord> PROVIDER_ORDER_PKEY = Internal.createUniqueKey(ProviderOrders.PROVIDER_ORDERS, DSL.name("provider_order_pkey"), new TableField[] { ProviderOrders.PROVIDER_ORDERS.ID }, true);
    public static final UniqueKey<ProvidersRecord> PROVIDER_PKEY = Internal.createUniqueKey(Providers.PROVIDERS, DSL.name("provider_pkey"), new TableField[] { Providers.PROVIDERS.ID }, true);
    public static final UniqueKey<ProvidersRecord> UNIQUE_PROVIDER_NAME_TYPE_QUOTA = Internal.createUniqueKey(Providers.PROVIDERS, DSL.name("unique_provider_name_type_quota"), new TableField[] { Providers.PROVIDERS.TENANT_ID, Providers.PROVIDERS.PROVIDER_NAME, Providers.PROVIDERS.PROVIDER_TYPE, Providers.PROVIDERS.QUOTA_TYPE }, true);
    public static final UniqueKey<RecommendedAppsRecord> RECOMMENDED_APP_PKEY = Internal.createUniqueKey(RecommendedApps.RECOMMENDED_APPS, DSL.name("recommended_app_pkey"), new TableField[] { RecommendedApps.RECOMMENDED_APPS.ID }, true);
    public static final UniqueKey<SavedMessagesRecord> SAVED_MESSAGE_PKEY = Internal.createUniqueKey(SavedMessages.SAVED_MESSAGES, DSL.name("saved_message_pkey"), new TableField[] { SavedMessages.SAVED_MESSAGES.ID }, true);
    public static final UniqueKey<SitesRecord> SITE_PKEY = Internal.createUniqueKey(Sites.SITES, DSL.name("site_pkey"), new TableField[] { Sites.SITES.ID }, true);
    public static final UniqueKey<TenantAccountJoinsRecord> TENANT_ACCOUNT_JOIN_PKEY = Internal.createUniqueKey(TenantAccountJoins.TENANT_ACCOUNT_JOINS, DSL.name("tenant_account_join_pkey"), new TableField[] { TenantAccountJoins.TENANT_ACCOUNT_JOINS.ID }, true);
    public static final UniqueKey<TenantAccountJoinsRecord> UNIQUE_TENANT_ACCOUNT_JOIN = Internal.createUniqueKey(TenantAccountJoins.TENANT_ACCOUNT_JOINS, DSL.name("unique_tenant_account_join"), new TableField[] { TenantAccountJoins.TENANT_ACCOUNT_JOINS.TENANT_ID, TenantAccountJoins.TENANT_ACCOUNT_JOINS.ACCOUNT_ID }, true);
    public static final UniqueKey<TenantDefaultModelsRecord> TENANT_DEFAULT_MODEL_PKEY = Internal.createUniqueKey(TenantDefaultModels.TENANT_DEFAULT_MODELS, DSL.name("tenant_default_model_pkey"), new TableField[] { TenantDefaultModels.TENANT_DEFAULT_MODELS.ID }, true);
    public static final UniqueKey<TenantPreferredModelProvidersRecord> TENANT_PREFERRED_MODEL_PROVIDER_PKEY = Internal.createUniqueKey(TenantPreferredModelProviders.TENANT_PREFERRED_MODEL_PROVIDERS, DSL.name("tenant_preferred_model_provider_pkey"), new TableField[] { TenantPreferredModelProviders.TENANT_PREFERRED_MODEL_PROVIDERS.ID }, true);
    public static final UniqueKey<TenantsRecord> TENANT_PKEY = Internal.createUniqueKey(Tenants.TENANTS, DSL.name("tenant_pkey"), new TableField[] { Tenants.TENANTS.ID }, true);
    public static final UniqueKey<ToolApiProvidersRecord> TOOL_API_PROVIDER_PKEY = Internal.createUniqueKey(ToolApiProviders.TOOL_API_PROVIDERS, DSL.name("tool_api_provider_pkey"), new TableField[] { ToolApiProviders.TOOL_API_PROVIDERS.ID }, true);
    public static final UniqueKey<ToolApiProvidersRecord> UNIQUE_API_TOOL_PROVIDER = Internal.createUniqueKey(ToolApiProviders.TOOL_API_PROVIDERS, DSL.name("unique_api_tool_provider"), new TableField[] { ToolApiProviders.TOOL_API_PROVIDERS.NAME, ToolApiProviders.TOOL_API_PROVIDERS.TENANT_ID }, true);
    public static final UniqueKey<ToolBuiltinProvidersRecord> TOOL_BUILTIN_PROVIDER_PKEY = Internal.createUniqueKey(ToolBuiltinProviders.TOOL_BUILTIN_PROVIDERS, DSL.name("tool_builtin_provider_pkey"), new TableField[] { ToolBuiltinProviders.TOOL_BUILTIN_PROVIDERS.ID }, true);
    public static final UniqueKey<ToolBuiltinProvidersRecord> UNIQUE_BUILTIN_TOOL_PROVIDER = Internal.createUniqueKey(ToolBuiltinProviders.TOOL_BUILTIN_PROVIDERS, DSL.name("unique_builtin_tool_provider"), new TableField[] { ToolBuiltinProviders.TOOL_BUILTIN_PROVIDERS.TENANT_ID, ToolBuiltinProviders.TOOL_BUILTIN_PROVIDERS.PROVIDER }, true);
    public static final UniqueKey<ToolConversationVariablesRecord> TOOL_CONVERSATION_VARIABLES_PKEY = Internal.createUniqueKey(ToolConversationVariables.TOOL_CONVERSATION_VARIABLES, DSL.name("tool_conversation_variables_pkey"), new TableField[] { ToolConversationVariables.TOOL_CONVERSATION_VARIABLES.ID }, true);
    public static final UniqueKey<ToolFilesRecord> TOOL_FILE_PKEY = Internal.createUniqueKey(ToolFiles.TOOL_FILES, DSL.name("tool_file_pkey"), new TableField[] { ToolFiles.TOOL_FILES.ID }, true);
    public static final UniqueKey<ToolModelInvokesRecord> TOOL_MODEL_INVOKE_PKEY = Internal.createUniqueKey(ToolModelInvokes.TOOL_MODEL_INVOKES, DSL.name("tool_model_invoke_pkey"), new TableField[] { ToolModelInvokes.TOOL_MODEL_INVOKES.ID }, true);
    public static final UniqueKey<ToolProvidersRecord> TOOL_PROVIDER_PKEY = Internal.createUniqueKey(ToolProviders.TOOL_PROVIDERS, DSL.name("tool_provider_pkey"), new TableField[] { ToolProviders.TOOL_PROVIDERS.ID }, true);
    public static final UniqueKey<ToolProvidersRecord> UNIQUE_TOOL_PROVIDER_TOOL_NAME = Internal.createUniqueKey(ToolProviders.TOOL_PROVIDERS, DSL.name("unique_tool_provider_tool_name"), new TableField[] { ToolProviders.TOOL_PROVIDERS.TENANT_ID, ToolProviders.TOOL_PROVIDERS.TOOL_NAME }, true);
    public static final UniqueKey<ToolPublishedAppsRecord> PUBLISHED_APP_TOOL_PKEY = Internal.createUniqueKey(ToolPublishedApps.TOOL_PUBLISHED_APPS, DSL.name("published_app_tool_pkey"), new TableField[] { ToolPublishedApps.TOOL_PUBLISHED_APPS.ID }, true);
    public static final UniqueKey<ToolPublishedAppsRecord> UNIQUE_PUBLISHED_APP_TOOL = Internal.createUniqueKey(ToolPublishedApps.TOOL_PUBLISHED_APPS, DSL.name("unique_published_app_tool"), new TableField[] { ToolPublishedApps.TOOL_PUBLISHED_APPS.APP_ID, ToolPublishedApps.TOOL_PUBLISHED_APPS.USER_ID }, true);
    public static final UniqueKey<UploadFilesRecord> UPLOAD_FILE_PKEY = Internal.createUniqueKey(UploadFiles.UPLOAD_FILES, DSL.name("upload_file_pkey"), new TableField[] { UploadFiles.UPLOAD_FILES.ID }, true);
    public static final UniqueKey<WorkflowAppLogsRecord> WORKFLOW_APP_LOG_PKEY = Internal.createUniqueKey(WorkflowAppLogs.WORKFLOW_APP_LOGS, DSL.name("workflow_app_log_pkey"), new TableField[] { WorkflowAppLogs.WORKFLOW_APP_LOGS.ID }, true);
    public static final UniqueKey<WorkflowNodeExecutionsRecord> WORKFLOW_NODE_EXECUTION_PKEY = Internal.createUniqueKey(WorkflowNodeExecutions.WORKFLOW_NODE_EXECUTIONS, DSL.name("workflow_node_execution_pkey"), new TableField[] { WorkflowNodeExecutions.WORKFLOW_NODE_EXECUTIONS.ID }, true);
    public static final UniqueKey<WorkflowRunsRecord> WORKFLOW_RUN_PKEY = Internal.createUniqueKey(WorkflowRuns.WORKFLOW_RUNS, DSL.name("workflow_run_pkey"), new TableField[] { WorkflowRuns.WORKFLOW_RUNS.ID }, true);
    public static final UniqueKey<WorkflowsRecord> WORKFLOW_PKEY = Internal.createUniqueKey(Workflows.WORKFLOWS, DSL.name("workflow_pkey"), new TableField[] { Workflows.WORKFLOWS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ToolPublishedAppsRecord, AppsRecord> TOOL_PUBLISHED_APPS__TOOL_PUBLISHED_APPS_APP_ID_FKEY = Internal.createForeignKey(ToolPublishedApps.TOOL_PUBLISHED_APPS, DSL.name("tool_published_apps_app_id_fkey"), new TableField[] { ToolPublishedApps.TOOL_PUBLISHED_APPS.APP_ID }, Keys.APP_PKEY, new TableField[] { Apps.APPS.ID }, true);
}
