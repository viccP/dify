/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.Providers;
import com.bonc.lops.jooq.tables.records.ProvidersRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ProvidersDao extends DAOImpl<ProvidersRecord, com.bonc.lops.jooq.tables.pojos.Providers, UUID> {

    /**
     * Create a new ProvidersDao without any configuration
     */
    public ProvidersDao() {
        super(Providers.PROVIDERS, com.bonc.lops.jooq.tables.pojos.Providers.class);
    }

    /**
     * Create a new ProvidersDao with an attached configuration
     */
    @Autowired
    public ProvidersDao(Configuration configuration) {
        super(Providers.PROVIDERS, com.bonc.lops.jooq.tables.pojos.Providers.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.Providers object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Providers.PROVIDERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchById(UUID... values) {
        return fetch(Providers.PROVIDERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.Providers fetchOneById(UUID value) {
        return fetchOne(Providers.PROVIDERS.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfTenantId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Providers.PROVIDERS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByTenantId(UUID... values) {
        return fetch(Providers.PROVIDERS.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>provider_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfProviderName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Providers.PROVIDERS.PROVIDER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>provider_name IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByProviderName(String... values) {
        return fetch(Providers.PROVIDERS.PROVIDER_NAME, values);
    }

    /**
     * Fetch records that have <code>provider_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfProviderType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Providers.PROVIDERS.PROVIDER_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>provider_type IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByProviderType(String... values) {
        return fetch(Providers.PROVIDERS.PROVIDER_TYPE, values);
    }

    /**
     * Fetch records that have <code>encrypted_config BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfEncryptedConfig(String lowerInclusive, String upperInclusive) {
        return fetchRange(Providers.PROVIDERS.ENCRYPTED_CONFIG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>encrypted_config IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByEncryptedConfig(String... values) {
        return fetch(Providers.PROVIDERS.ENCRYPTED_CONFIG, values);
    }

    /**
     * Fetch records that have <code>is_valid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfIsValid(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Providers.PROVIDERS.IS_VALID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_valid IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByIsValid(Boolean... values) {
        return fetch(Providers.PROVIDERS.IS_VALID, values);
    }

    /**
     * Fetch records that have <code>last_used BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfLastUsed(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Providers.PROVIDERS.LAST_USED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_used IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByLastUsed(LocalDateTime... values) {
        return fetch(Providers.PROVIDERS.LAST_USED, values);
    }

    /**
     * Fetch records that have <code>quota_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfQuotaType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Providers.PROVIDERS.QUOTA_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>quota_type IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByQuotaType(String... values) {
        return fetch(Providers.PROVIDERS.QUOTA_TYPE, values);
    }

    /**
     * Fetch records that have <code>quota_limit BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfQuotaLimit(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Providers.PROVIDERS.QUOTA_LIMIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>quota_limit IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByQuotaLimit(Long... values) {
        return fetch(Providers.PROVIDERS.QUOTA_LIMIT, values);
    }

    /**
     * Fetch records that have <code>quota_used BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfQuotaUsed(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Providers.PROVIDERS.QUOTA_USED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>quota_used IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByQuotaUsed(Long... values) {
        return fetch(Providers.PROVIDERS.QUOTA_USED, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Providers.PROVIDERS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Providers.PROVIDERS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Providers.PROVIDERS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Providers> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Providers.PROVIDERS.UPDATED_AT, values);
    }
}
