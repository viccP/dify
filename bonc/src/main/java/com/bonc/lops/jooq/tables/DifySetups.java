/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DifySetupsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DifySetups extends TableImpl<DifySetupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dify_setups</code>
     */
    public static final DifySetups DIFY_SETUPS = new DifySetups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DifySetupsRecord> getRecordType() {
        return DifySetupsRecord.class;
    }

    /**
     * The column <code>public.dify_setups.version</code>.
     */
    public final TableField<DifySetupsRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.dify_setups.setup_at</code>.
     */
    public final TableField<DifySetupsRecord, LocalDateTime> SETUP_AT = createField(DSL.name("setup_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private DifySetups(Name alias, Table<DifySetupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DifySetups(Name alias, Table<DifySetupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dify_setups</code> table reference
     */
    public DifySetups(String alias) {
        this(DSL.name(alias), DIFY_SETUPS);
    }

    /**
     * Create an aliased <code>public.dify_setups</code> table reference
     */
    public DifySetups(Name alias) {
        this(alias, DIFY_SETUPS);
    }

    /**
     * Create a <code>public.dify_setups</code> table reference
     */
    public DifySetups() {
        this(DSL.name("dify_setups"), null);
    }

    public <O extends Record> DifySetups(Table<O> child, ForeignKey<O, DifySetupsRecord> key) {
        super(child, key, DIFY_SETUPS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<DifySetupsRecord> getPrimaryKey() {
        return Keys.DIFY_SETUP_PKEY;
    }

    @Override
    public List<UniqueKey<DifySetupsRecord>> getKeys() {
        return Arrays.<UniqueKey<DifySetupsRecord>>asList(Keys.DIFY_SETUP_PKEY);
    }

    @Override
    public DifySetups as(String alias) {
        return new DifySetups(DSL.name(alias), this);
    }

    @Override
    public DifySetups as(Name alias) {
        return new DifySetups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DifySetups rename(String name) {
        return new DifySetups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DifySetups rename(Name name) {
        return new DifySetups(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, LocalDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
