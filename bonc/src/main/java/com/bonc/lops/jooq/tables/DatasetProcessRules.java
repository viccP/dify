/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DatasetProcessRulesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetProcessRules extends TableImpl<DatasetProcessRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dataset_process_rules</code>
     */
    public static final DatasetProcessRules DATASET_PROCESS_RULES = new DatasetProcessRules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetProcessRulesRecord> getRecordType() {
        return DatasetProcessRulesRecord.class;
    }

    /**
     * The column <code>public.dataset_process_rules.id</code>.
     */
    public final TableField<DatasetProcessRulesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.dataset_process_rules.dataset_id</code>.
     */
    public final TableField<DatasetProcessRulesRecord, UUID> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.dataset_process_rules.mode</code>.
     */
    public final TableField<DatasetProcessRulesRecord, String> MODE = createField(DSL.name("mode"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'automatic'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.dataset_process_rules.rules</code>.
     */
    public final TableField<DatasetProcessRulesRecord, String> RULES = createField(DSL.name("rules"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataset_process_rules.created_by</code>.
     */
    public final TableField<DatasetProcessRulesRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.dataset_process_rules.created_at</code>.
     */
    public final TableField<DatasetProcessRulesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private DatasetProcessRules(Name alias, Table<DatasetProcessRulesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetProcessRules(Name alias, Table<DatasetProcessRulesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dataset_process_rules</code> table reference
     */
    public DatasetProcessRules(String alias) {
        this(DSL.name(alias), DATASET_PROCESS_RULES);
    }

    /**
     * Create an aliased <code>public.dataset_process_rules</code> table reference
     */
    public DatasetProcessRules(Name alias) {
        this(alias, DATASET_PROCESS_RULES);
    }

    /**
     * Create a <code>public.dataset_process_rules</code> table reference
     */
    public DatasetProcessRules() {
        this(DSL.name("dataset_process_rules"), null);
    }

    public <O extends Record> DatasetProcessRules(Table<O> child, ForeignKey<O, DatasetProcessRulesRecord> key) {
        super(child, key, DATASET_PROCESS_RULES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATASET_PROCESS_RULE_DATASET_ID_IDX);
    }

    @Override
    public UniqueKey<DatasetProcessRulesRecord> getPrimaryKey() {
        return Keys.DATASET_PROCESS_RULE_PKEY;
    }

    @Override
    public List<UniqueKey<DatasetProcessRulesRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetProcessRulesRecord>>asList(Keys.DATASET_PROCESS_RULE_PKEY);
    }

    @Override
    public DatasetProcessRules as(String alias) {
        return new DatasetProcessRules(DSL.name(alias), this);
    }

    @Override
    public DatasetProcessRules as(Name alias) {
        return new DatasetProcessRules(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetProcessRules rename(String name) {
        return new DatasetProcessRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetProcessRules rename(Name name) {
        return new DatasetProcessRules(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, String, String, UUID, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
