/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.MessageFeedbacksRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageFeedbacks extends TableImpl<MessageFeedbacksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.message_feedbacks</code>
     */
    public static final MessageFeedbacks MESSAGE_FEEDBACKS = new MessageFeedbacks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageFeedbacksRecord> getRecordType() {
        return MessageFeedbacksRecord.class;
    }

    /**
     * The column <code>public.message_feedbacks.id</code>.
     */
    public final TableField<MessageFeedbacksRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.message_feedbacks.app_id</code>.
     */
    public final TableField<MessageFeedbacksRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.message_feedbacks.conversation_id</code>.
     */
    public final TableField<MessageFeedbacksRecord, UUID> CONVERSATION_ID = createField(DSL.name("conversation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.message_feedbacks.message_id</code>.
     */
    public final TableField<MessageFeedbacksRecord, UUID> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.message_feedbacks.rating</code>.
     */
    public final TableField<MessageFeedbacksRecord, String> RATING = createField(DSL.name("rating"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.message_feedbacks.content</code>.
     */
    public final TableField<MessageFeedbacksRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_feedbacks.from_source</code>.
     */
    public final TableField<MessageFeedbacksRecord, String> FROM_SOURCE = createField(DSL.name("from_source"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.message_feedbacks.from_end_user_id</code>.
     */
    public final TableField<MessageFeedbacksRecord, UUID> FROM_END_USER_ID = createField(DSL.name("from_end_user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.message_feedbacks.from_account_id</code>.
     */
    public final TableField<MessageFeedbacksRecord, UUID> FROM_ACCOUNT_ID = createField(DSL.name("from_account_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.message_feedbacks.created_at</code>.
     */
    public final TableField<MessageFeedbacksRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.message_feedbacks.updated_at</code>.
     */
    public final TableField<MessageFeedbacksRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    private MessageFeedbacks(Name alias, Table<MessageFeedbacksRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageFeedbacks(Name alias, Table<MessageFeedbacksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.message_feedbacks</code> table reference
     */
    public MessageFeedbacks(String alias) {
        this(DSL.name(alias), MESSAGE_FEEDBACKS);
    }

    /**
     * Create an aliased <code>public.message_feedbacks</code> table reference
     */
    public MessageFeedbacks(Name alias) {
        this(alias, MESSAGE_FEEDBACKS);
    }

    /**
     * Create a <code>public.message_feedbacks</code> table reference
     */
    public MessageFeedbacks() {
        this(DSL.name("message_feedbacks"), null);
    }

    public <O extends Record> MessageFeedbacks(Table<O> child, ForeignKey<O, MessageFeedbacksRecord> key) {
        super(child, key, MESSAGE_FEEDBACKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_FEEDBACK_APP_IDX, Indexes.MESSAGE_FEEDBACK_CONVERSATION_IDX, Indexes.MESSAGE_FEEDBACK_MESSAGE_IDX);
    }

    @Override
    public UniqueKey<MessageFeedbacksRecord> getPrimaryKey() {
        return Keys.MESSAGE_FEEDBACK_PKEY;
    }

    @Override
    public List<UniqueKey<MessageFeedbacksRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageFeedbacksRecord>>asList(Keys.MESSAGE_FEEDBACK_PKEY);
    }

    @Override
    public MessageFeedbacks as(String alias) {
        return new MessageFeedbacks(DSL.name(alias), this);
    }

    @Override
    public MessageFeedbacks as(Name alias) {
        return new MessageFeedbacks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageFeedbacks rename(String name) {
        return new MessageFeedbacks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageFeedbacks rename(Name name) {
        return new MessageFeedbacks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, UUID, UUID, UUID, String, String, String, UUID, UUID, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
