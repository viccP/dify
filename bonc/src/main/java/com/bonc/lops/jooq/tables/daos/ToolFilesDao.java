/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.ToolFiles;
import com.bonc.lops.jooq.tables.records.ToolFilesRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ToolFilesDao extends DAOImpl<ToolFilesRecord, com.bonc.lops.jooq.tables.pojos.ToolFiles, UUID> {

    /**
     * Create a new ToolFilesDao without any configuration
     */
    public ToolFilesDao() {
        super(ToolFiles.TOOL_FILES, com.bonc.lops.jooq.tables.pojos.ToolFiles.class);
    }

    /**
     * Create a new ToolFilesDao with an attached configuration
     */
    @Autowired
    public ToolFilesDao(Configuration configuration) {
        super(ToolFiles.TOOL_FILES, com.bonc.lops.jooq.tables.pojos.ToolFiles.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.ToolFiles object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ToolFiles.TOOL_FILES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchById(UUID... values) {
        return fetch(ToolFiles.TOOL_FILES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.ToolFiles fetchOneById(UUID value) {
        return fetchOne(ToolFiles.TOOL_FILES.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ToolFiles.TOOL_FILES.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchByUserId(UUID... values) {
        return fetch(ToolFiles.TOOL_FILES.USER_ID, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchRangeOfTenantId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ToolFiles.TOOL_FILES.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchByTenantId(UUID... values) {
        return fetch(ToolFiles.TOOL_FILES.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>conversation_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchRangeOfConversationId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ToolFiles.TOOL_FILES.CONVERSATION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>conversation_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchByConversationId(UUID... values) {
        return fetch(ToolFiles.TOOL_FILES.CONVERSATION_ID, values);
    }

    /**
     * Fetch records that have <code>file_key BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchRangeOfFileKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(ToolFiles.TOOL_FILES.FILE_KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>file_key IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchByFileKey(String... values) {
        return fetch(ToolFiles.TOOL_FILES.FILE_KEY, values);
    }

    /**
     * Fetch records that have <code>mimetype BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchRangeOfMimetype(String lowerInclusive, String upperInclusive) {
        return fetchRange(ToolFiles.TOOL_FILES.MIMETYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mimetype IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchByMimetype(String... values) {
        return fetch(ToolFiles.TOOL_FILES.MIMETYPE, values);
    }

    /**
     * Fetch records that have <code>original_url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchRangeOfOriginalUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(ToolFiles.TOOL_FILES.ORIGINAL_URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>original_url IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.ToolFiles> fetchByOriginalUrl(String... values) {
        return fetch(ToolFiles.TOOL_FILES.ORIGINAL_URL, values);
    }
}
