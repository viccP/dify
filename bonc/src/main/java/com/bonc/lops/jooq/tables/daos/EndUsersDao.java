/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.EndUsers;
import com.bonc.lops.jooq.tables.records.EndUsersRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class EndUsersDao extends DAOImpl<EndUsersRecord, com.bonc.lops.jooq.tables.pojos.EndUsers, UUID> {

    /**
     * Create a new EndUsersDao without any configuration
     */
    public EndUsersDao() {
        super(EndUsers.END_USERS, com.bonc.lops.jooq.tables.pojos.EndUsers.class);
    }

    /**
     * Create a new EndUsersDao with an attached configuration
     */
    @Autowired
    public EndUsersDao(Configuration configuration) {
        super(EndUsers.END_USERS, com.bonc.lops.jooq.tables.pojos.EndUsers.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.EndUsers object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EndUsers.END_USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchById(UUID... values) {
        return fetch(EndUsers.END_USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.EndUsers fetchOneById(UUID value) {
        return fetchOne(EndUsers.END_USERS.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfTenantId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EndUsers.END_USERS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchByTenantId(UUID... values) {
        return fetch(EndUsers.END_USERS.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>app_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfAppId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EndUsers.END_USERS.APP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>app_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchByAppId(UUID... values) {
        return fetch(EndUsers.END_USERS.APP_ID, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(EndUsers.END_USERS.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchByType(String... values) {
        return fetch(EndUsers.END_USERS.TYPE, values);
    }

    /**
     * Fetch records that have <code>external_user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfExternalUserId(String lowerInclusive, String upperInclusive) {
        return fetchRange(EndUsers.END_USERS.EXTERNAL_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>external_user_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchByExternalUserId(String... values) {
        return fetch(EndUsers.END_USERS.EXTERNAL_USER_ID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(EndUsers.END_USERS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchByName(String... values) {
        return fetch(EndUsers.END_USERS.NAME, values);
    }

    /**
     * Fetch records that have <code>is_anonymous BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfIsAnonymous(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(EndUsers.END_USERS.IS_ANONYMOUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_anonymous IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchByIsAnonymous(Boolean... values) {
        return fetch(EndUsers.END_USERS.IS_ANONYMOUS, values);
    }

    /**
     * Fetch records that have <code>session_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfSessionId(String lowerInclusive, String upperInclusive) {
        return fetchRange(EndUsers.END_USERS.SESSION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>session_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchBySessionId(String... values) {
        return fetch(EndUsers.END_USERS.SESSION_ID, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(EndUsers.END_USERS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(EndUsers.END_USERS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(EndUsers.END_USERS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.EndUsers> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(EndUsers.END_USERS.UPDATED_AT, values);
    }
}
