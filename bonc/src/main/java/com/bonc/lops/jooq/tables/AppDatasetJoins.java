/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.AppDatasetJoinsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppDatasetJoins extends TableImpl<AppDatasetJoinsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.app_dataset_joins</code>
     */
    public static final AppDatasetJoins APP_DATASET_JOINS = new AppDatasetJoins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppDatasetJoinsRecord> getRecordType() {
        return AppDatasetJoinsRecord.class;
    }

    /**
     * The column <code>public.app_dataset_joins.id</code>.
     */
    public final TableField<AppDatasetJoinsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.app_dataset_joins.app_id</code>.
     */
    public final TableField<AppDatasetJoinsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.app_dataset_joins.dataset_id</code>.
     */
    public final TableField<AppDatasetJoinsRecord, UUID> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.app_dataset_joins.created_at</code>.
     */
    public final TableField<AppDatasetJoinsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AppDatasetJoins(Name alias, Table<AppDatasetJoinsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppDatasetJoins(Name alias, Table<AppDatasetJoinsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.app_dataset_joins</code> table reference
     */
    public AppDatasetJoins(String alias) {
        this(DSL.name(alias), APP_DATASET_JOINS);
    }

    /**
     * Create an aliased <code>public.app_dataset_joins</code> table reference
     */
    public AppDatasetJoins(Name alias) {
        this(alias, APP_DATASET_JOINS);
    }

    /**
     * Create a <code>public.app_dataset_joins</code> table reference
     */
    public AppDatasetJoins() {
        this(DSL.name("app_dataset_joins"), null);
    }

    public <O extends Record> AppDatasetJoins(Table<O> child, ForeignKey<O, AppDatasetJoinsRecord> key) {
        super(child, key, APP_DATASET_JOINS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APP_DATASET_JOIN_APP_DATASET_IDX);
    }

    @Override
    public UniqueKey<AppDatasetJoinsRecord> getPrimaryKey() {
        return Keys.APP_DATASET_JOIN_PKEY;
    }

    @Override
    public List<UniqueKey<AppDatasetJoinsRecord>> getKeys() {
        return Arrays.<UniqueKey<AppDatasetJoinsRecord>>asList(Keys.APP_DATASET_JOIN_PKEY);
    }

    @Override
    public AppDatasetJoins as(String alias) {
        return new AppDatasetJoins(DSL.name(alias), this);
    }

    @Override
    public AppDatasetJoins as(Name alias) {
        return new AppDatasetJoins(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppDatasetJoins rename(String name) {
        return new AppDatasetJoins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppDatasetJoins rename(Name name) {
        return new AppDatasetJoins(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
