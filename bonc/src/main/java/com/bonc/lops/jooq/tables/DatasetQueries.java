/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.DatasetQueriesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetQueries extends TableImpl<DatasetQueriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dataset_queries</code>
     */
    public static final DatasetQueries DATASET_QUERIES = new DatasetQueries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetQueriesRecord> getRecordType() {
        return DatasetQueriesRecord.class;
    }

    /**
     * The column <code>public.dataset_queries.id</code>.
     */
    public final TableField<DatasetQueriesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.dataset_queries.dataset_id</code>.
     */
    public final TableField<DatasetQueriesRecord, UUID> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.dataset_queries.content</code>.
     */
    public final TableField<DatasetQueriesRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.dataset_queries.source</code>.
     */
    public final TableField<DatasetQueriesRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.dataset_queries.source_app_id</code>.
     */
    public final TableField<DatasetQueriesRecord, UUID> SOURCE_APP_ID = createField(DSL.name("source_app_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.dataset_queries.created_by_role</code>.
     */
    public final TableField<DatasetQueriesRecord, String> CREATED_BY_ROLE = createField(DSL.name("created_by_role"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.dataset_queries.created_by</code>.
     */
    public final TableField<DatasetQueriesRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.dataset_queries.created_at</code>.
     */
    public final TableField<DatasetQueriesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private DatasetQueries(Name alias, Table<DatasetQueriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetQueries(Name alias, Table<DatasetQueriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dataset_queries</code> table reference
     */
    public DatasetQueries(String alias) {
        this(DSL.name(alias), DATASET_QUERIES);
    }

    /**
     * Create an aliased <code>public.dataset_queries</code> table reference
     */
    public DatasetQueries(Name alias) {
        this(alias, DATASET_QUERIES);
    }

    /**
     * Create a <code>public.dataset_queries</code> table reference
     */
    public DatasetQueries() {
        this(DSL.name("dataset_queries"), null);
    }

    public <O extends Record> DatasetQueries(Table<O> child, ForeignKey<O, DatasetQueriesRecord> key) {
        super(child, key, DATASET_QUERIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATASET_QUERY_DATASET_ID_IDX);
    }

    @Override
    public UniqueKey<DatasetQueriesRecord> getPrimaryKey() {
        return Keys.DATASET_QUERY_PKEY;
    }

    @Override
    public List<UniqueKey<DatasetQueriesRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetQueriesRecord>>asList(Keys.DATASET_QUERY_PKEY);
    }

    @Override
    public DatasetQueries as(String alias) {
        return new DatasetQueries(DSL.name(alias), this);
    }

    @Override
    public DatasetQueries as(Name alias) {
        return new DatasetQueries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetQueries rename(String name) {
        return new DatasetQueries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetQueries rename(Name name) {
        return new DatasetQueries(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, String, String, UUID, String, UUID, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
