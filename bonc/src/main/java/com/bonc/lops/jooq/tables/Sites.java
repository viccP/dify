/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.SitesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sites extends TableImpl<SitesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sites</code>
     */
    public static final Sites SITES = new Sites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SitesRecord> getRecordType() {
        return SitesRecord.class;
    }

    /**
     * The column <code>public.sites.id</code>.
     */
    public final TableField<SitesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.sites.app_id</code>.
     */
    public final TableField<SitesRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sites.title</code>.
     */
    public final TableField<SitesRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.sites.icon</code>.
     */
    public final TableField<SitesRecord, String> ICON = createField(DSL.name("icon"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sites.icon_background</code>.
     */
    public final TableField<SitesRecord, String> ICON_BACKGROUND = createField(DSL.name("icon_background"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sites.description</code>.
     */
    public final TableField<SitesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.sites.default_language</code>.
     */
    public final TableField<SitesRecord, String> DEFAULT_LANGUAGE = createField(DSL.name("default_language"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.sites.copyright</code>.
     */
    public final TableField<SitesRecord, String> COPYRIGHT = createField(DSL.name("copyright"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sites.privacy_policy</code>.
     */
    public final TableField<SitesRecord, String> PRIVACY_POLICY = createField(DSL.name("privacy_policy"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sites.customize_domain</code>.
     */
    public final TableField<SitesRecord, String> CUSTOMIZE_DOMAIN = createField(DSL.name("customize_domain"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sites.customize_token_strategy</code>.
     */
    public final TableField<SitesRecord, String> CUSTOMIZE_TOKEN_STRATEGY = createField(DSL.name("customize_token_strategy"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.sites.prompt_public</code>.
     */
    public final TableField<SitesRecord, Boolean> PROMPT_PUBLIC = createField(DSL.name("prompt_public"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.sites.status</code>.
     */
    public final TableField<SitesRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'normal'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.sites.created_at</code>.
     */
    public final TableField<SitesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.sites.updated_at</code>.
     */
    public final TableField<SitesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.sites.code</code>.
     */
    public final TableField<SitesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255), this, "");

    private Sites(Name alias, Table<SitesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sites(Name alias, Table<SitesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sites</code> table reference
     */
    public Sites(String alias) {
        this(DSL.name(alias), SITES);
    }

    /**
     * Create an aliased <code>public.sites</code> table reference
     */
    public Sites(Name alias) {
        this(alias, SITES);
    }

    /**
     * Create a <code>public.sites</code> table reference
     */
    public Sites() {
        this(DSL.name("sites"), null);
    }

    public <O extends Record> Sites(Table<O> child, ForeignKey<O, SitesRecord> key) {
        super(child, key, SITES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SITE_APP_ID_IDX, Indexes.SITE_CODE_IDX);
    }

    @Override
    public UniqueKey<SitesRecord> getPrimaryKey() {
        return Keys.SITE_PKEY;
    }

    @Override
    public List<UniqueKey<SitesRecord>> getKeys() {
        return Arrays.<UniqueKey<SitesRecord>>asList(Keys.SITE_PKEY);
    }

    @Override
    public Sites as(String alias) {
        return new Sites(DSL.name(alias), this);
    }

    @Override
    public Sites as(Name alias) {
        return new Sites(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sites rename(String name) {
        return new Sites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sites rename(Name name) {
        return new Sites(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<UUID, UUID, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
