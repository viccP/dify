/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.Tenants;
import com.bonc.lops.jooq.tables.records.TenantsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TenantsDao extends DAOImpl<TenantsRecord, com.bonc.lops.jooq.tables.pojos.Tenants, UUID> {

    /**
     * Create a new TenantsDao without any configuration
     */
    public TenantsDao() {
        super(Tenants.TENANTS, com.bonc.lops.jooq.tables.pojos.Tenants.class);
    }

    /**
     * Create a new TenantsDao with an attached configuration
     */
    @Autowired
    public TenantsDao(Configuration configuration) {
        super(Tenants.TENANTS, com.bonc.lops.jooq.tables.pojos.Tenants.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.Tenants object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Tenants.TENANTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchById(UUID... values) {
        return fetch(Tenants.TENANTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.Tenants fetchOneById(UUID value) {
        return fetchOne(Tenants.TENANTS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tenants.TENANTS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchByName(String... values) {
        return fetch(Tenants.TENANTS.NAME, values);
    }

    /**
     * Fetch records that have <code>encrypt_public_key BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchRangeOfEncryptPublicKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tenants.TENANTS.ENCRYPT_PUBLIC_KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>encrypt_public_key IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchByEncryptPublicKey(String... values) {
        return fetch(Tenants.TENANTS.ENCRYPT_PUBLIC_KEY, values);
    }

    /**
     * Fetch records that have <code>plan BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchRangeOfPlan(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tenants.TENANTS.PLAN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>plan IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchByPlan(String... values) {
        return fetch(Tenants.TENANTS.PLAN, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tenants.TENANTS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchByStatus(String... values) {
        return fetch(Tenants.TENANTS.STATUS, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Tenants.TENANTS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Tenants.TENANTS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Tenants.TENANTS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Tenants.TENANTS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>custom_config BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchRangeOfCustomConfig(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tenants.TENANTS.CUSTOM_CONFIG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>custom_config IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Tenants> fetchByCustomConfig(String... values) {
        return fetch(Tenants.TENANTS.CUSTOM_CONFIG, values);
    }
}
