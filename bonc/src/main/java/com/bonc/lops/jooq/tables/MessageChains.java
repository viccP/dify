/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables;


import com.bonc.lops.jooq.Indexes;
import com.bonc.lops.jooq.Keys;
import com.bonc.lops.jooq.Public;
import com.bonc.lops.jooq.tables.records.MessageChainsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageChains extends TableImpl<MessageChainsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.message_chains</code>
     */
    public static final MessageChains MESSAGE_CHAINS = new MessageChains();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageChainsRecord> getRecordType() {
        return MessageChainsRecord.class;
    }

    /**
     * The column <code>public.message_chains.id</code>.
     */
    public final TableField<MessageChainsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.message_chains.message_id</code>.
     */
    public final TableField<MessageChainsRecord, UUID> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.message_chains.type</code>.
     */
    public final TableField<MessageChainsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.message_chains.input</code>.
     */
    public final TableField<MessageChainsRecord, String> INPUT = createField(DSL.name("input"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_chains.output</code>.
     */
    public final TableField<MessageChainsRecord, String> OUTPUT = createField(DSL.name("output"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_chains.created_at</code>.
     */
    public final TableField<MessageChainsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private MessageChains(Name alias, Table<MessageChainsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageChains(Name alias, Table<MessageChainsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.message_chains</code> table reference
     */
    public MessageChains(String alias) {
        this(DSL.name(alias), MESSAGE_CHAINS);
    }

    /**
     * Create an aliased <code>public.message_chains</code> table reference
     */
    public MessageChains(Name alias) {
        this(alias, MESSAGE_CHAINS);
    }

    /**
     * Create a <code>public.message_chains</code> table reference
     */
    public MessageChains() {
        this(DSL.name("message_chains"), null);
    }

    public <O extends Record> MessageChains(Table<O> child, ForeignKey<O, MessageChainsRecord> key) {
        super(child, key, MESSAGE_CHAINS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_CHAIN_MESSAGE_ID_IDX);
    }

    @Override
    public UniqueKey<MessageChainsRecord> getPrimaryKey() {
        return Keys.MESSAGE_CHAIN_PKEY;
    }

    @Override
    public List<UniqueKey<MessageChainsRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageChainsRecord>>asList(Keys.MESSAGE_CHAIN_PKEY);
    }

    @Override
    public MessageChains as(String alias) {
        return new MessageChains(DSL.name(alias), this);
    }

    @Override
    public MessageChains as(Name alias) {
        return new MessageChains(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageChains rename(String name) {
        return new MessageChains(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageChains rename(Name name) {
        return new MessageChains(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, String, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
