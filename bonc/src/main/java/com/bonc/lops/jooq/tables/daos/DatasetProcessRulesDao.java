/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.DatasetProcessRules;
import com.bonc.lops.jooq.tables.records.DatasetProcessRulesRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class DatasetProcessRulesDao extends DAOImpl<DatasetProcessRulesRecord, com.bonc.lops.jooq.tables.pojos.DatasetProcessRules, UUID> {

    /**
     * Create a new DatasetProcessRulesDao without any configuration
     */
    public DatasetProcessRulesDao() {
        super(DatasetProcessRules.DATASET_PROCESS_RULES, com.bonc.lops.jooq.tables.pojos.DatasetProcessRules.class);
    }

    /**
     * Create a new DatasetProcessRulesDao with an attached configuration
     */
    @Autowired
    public DatasetProcessRulesDao(Configuration configuration) {
        super(DatasetProcessRules.DATASET_PROCESS_RULES, com.bonc.lops.jooq.tables.pojos.DatasetProcessRules.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.DatasetProcessRules object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DatasetProcessRules.DATASET_PROCESS_RULES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchById(UUID... values) {
        return fetch(DatasetProcessRules.DATASET_PROCESS_RULES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.DatasetProcessRules fetchOneById(UUID value) {
        return fetchOne(DatasetProcessRules.DATASET_PROCESS_RULES.ID, value);
    }

    /**
     * Fetch records that have <code>dataset_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchRangeOfDatasetId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DatasetProcessRules.DATASET_PROCESS_RULES.DATASET_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dataset_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchByDatasetId(UUID... values) {
        return fetch(DatasetProcessRules.DATASET_PROCESS_RULES.DATASET_ID, values);
    }

    /**
     * Fetch records that have <code>mode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchRangeOfMode(String lowerInclusive, String upperInclusive) {
        return fetchRange(DatasetProcessRules.DATASET_PROCESS_RULES.MODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mode IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchByMode(String... values) {
        return fetch(DatasetProcessRules.DATASET_PROCESS_RULES.MODE, values);
    }

    /**
     * Fetch records that have <code>rules BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchRangeOfRules(String lowerInclusive, String upperInclusive) {
        return fetchRange(DatasetProcessRules.DATASET_PROCESS_RULES.RULES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rules IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchByRules(String... values) {
        return fetch(DatasetProcessRules.DATASET_PROCESS_RULES.RULES, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchRangeOfCreatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DatasetProcessRules.DATASET_PROCESS_RULES.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchByCreatedBy(UUID... values) {
        return fetch(DatasetProcessRules.DATASET_PROCESS_RULES.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DatasetProcessRules.DATASET_PROCESS_RULES.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DatasetProcessRules> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(DatasetProcessRules.DATASET_PROCESS_RULES.CREATED_AT, values);
    }
}
