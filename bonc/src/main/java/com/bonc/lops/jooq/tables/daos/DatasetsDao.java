/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.Datasets;
import com.bonc.lops.jooq.tables.records.DatasetsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class DatasetsDao extends DAOImpl<DatasetsRecord, com.bonc.lops.jooq.tables.pojos.Datasets, UUID> {

    /**
     * Create a new DatasetsDao without any configuration
     */
    public DatasetsDao() {
        super(Datasets.DATASETS, com.bonc.lops.jooq.tables.pojos.Datasets.class);
    }

    /**
     * Create a new DatasetsDao with an attached configuration
     */
    @Autowired
    public DatasetsDao(Configuration configuration) {
        super(Datasets.DATASETS, com.bonc.lops.jooq.tables.pojos.Datasets.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.Datasets object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Datasets.DATASETS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchById(UUID... values) {
        return fetch(Datasets.DATASETS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.Datasets fetchOneById(UUID value) {
        return fetchOne(Datasets.DATASETS.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfTenantId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Datasets.DATASETS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByTenantId(UUID... values) {
        return fetch(Datasets.DATASETS.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByName(String... values) {
        return fetch(Datasets.DATASETS.NAME, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByDescription(String... values) {
        return fetch(Datasets.DATASETS.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>provider BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfProvider(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.PROVIDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>provider IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByProvider(String... values) {
        return fetch(Datasets.DATASETS.PROVIDER, values);
    }

    /**
     * Fetch records that have <code>permission BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfPermission(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.PERMISSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permission IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByPermission(String... values) {
        return fetch(Datasets.DATASETS.PERMISSION, values);
    }

    /**
     * Fetch records that have <code>data_source_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfDataSourceType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.DATA_SOURCE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_source_type IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByDataSourceType(String... values) {
        return fetch(Datasets.DATASETS.DATA_SOURCE_TYPE, values);
    }

    /**
     * Fetch records that have <code>indexing_technique BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfIndexingTechnique(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.INDEXING_TECHNIQUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>indexing_technique IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByIndexingTechnique(String... values) {
        return fetch(Datasets.DATASETS.INDEXING_TECHNIQUE, values);
    }

    /**
     * Fetch records that have <code>index_struct BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfIndexStruct(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.INDEX_STRUCT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>index_struct IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByIndexStruct(String... values) {
        return fetch(Datasets.DATASETS.INDEX_STRUCT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfCreatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Datasets.DATASETS.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByCreatedBy(UUID... values) {
        return fetch(Datasets.DATASETS.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Datasets.DATASETS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Datasets.DATASETS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfUpdatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Datasets.DATASETS.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByUpdatedBy(UUID... values) {
        return fetch(Datasets.DATASETS.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Datasets.DATASETS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Datasets.DATASETS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>embedding_model BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfEmbeddingModel(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.EMBEDDING_MODEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>embedding_model IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByEmbeddingModel(String... values) {
        return fetch(Datasets.DATASETS.EMBEDDING_MODEL, values);
    }

    /**
     * Fetch records that have <code>embedding_model_provider BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfEmbeddingModelProvider(String lowerInclusive, String upperInclusive) {
        return fetchRange(Datasets.DATASETS.EMBEDDING_MODEL_PROVIDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>embedding_model_provider IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByEmbeddingModelProvider(String... values) {
        return fetch(Datasets.DATASETS.EMBEDDING_MODEL_PROVIDER, values);
    }

    /**
     * Fetch records that have <code>collection_binding_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfCollectionBindingId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Datasets.DATASETS.COLLECTION_BINDING_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>collection_binding_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByCollectionBindingId(UUID... values) {
        return fetch(Datasets.DATASETS.COLLECTION_BINDING_ID, values);
    }

    /**
     * Fetch records that have <code>retrieval_model BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchRangeOfRetrievalModel(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(Datasets.DATASETS.RETRIEVAL_MODEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>retrieval_model IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.Datasets> fetchByRetrievalModel(JSONB... values) {
        return fetch(Datasets.DATASETS.RETRIEVAL_MODEL, values);
    }
}
