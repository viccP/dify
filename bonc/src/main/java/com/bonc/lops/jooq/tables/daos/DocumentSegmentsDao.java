/*
 * This file is generated by jOOQ.
 */
package com.bonc.lops.jooq.tables.daos;


import com.bonc.lops.jooq.tables.DocumentSegments;
import com.bonc.lops.jooq.tables.records.DocumentSegmentsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSON;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class DocumentSegmentsDao extends DAOImpl<DocumentSegmentsRecord, com.bonc.lops.jooq.tables.pojos.DocumentSegments, UUID> {

    /**
     * Create a new DocumentSegmentsDao without any configuration
     */
    public DocumentSegmentsDao() {
        super(DocumentSegments.DOCUMENT_SEGMENTS, com.bonc.lops.jooq.tables.pojos.DocumentSegments.class);
    }

    /**
     * Create a new DocumentSegmentsDao with an attached configuration
     */
    @Autowired
    public DocumentSegmentsDao(Configuration configuration) {
        super(DocumentSegments.DOCUMENT_SEGMENTS, com.bonc.lops.jooq.tables.pojos.DocumentSegments.class, configuration);
    }

    @Override
    public UUID getId(com.bonc.lops.jooq.tables.pojos.DocumentSegments object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchById(UUID... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bonc.lops.jooq.tables.pojos.DocumentSegments fetchOneById(UUID value) {
        return fetchOne(DocumentSegments.DOCUMENT_SEGMENTS.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfTenantId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByTenantId(UUID... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>dataset_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfDatasetId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.DATASET_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dataset_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByDatasetId(UUID... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.DATASET_ID, values);
    }

    /**
     * Fetch records that have <code>document_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfDocumentId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.DOCUMENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>document_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByDocumentId(UUID... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.DOCUMENT_ID, values);
    }

    /**
     * Fetch records that have <code>position BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfPosition(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.POSITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>position IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByPosition(Integer... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.POSITION, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByContent(String... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.CONTENT, values);
    }

    /**
     * Fetch records that have <code>word_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfWordCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.WORD_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>word_count IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByWordCount(Integer... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.WORD_COUNT, values);
    }

    /**
     * Fetch records that have <code>tokens BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfTokens(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.TOKENS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tokens IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByTokens(Integer... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.TOKENS, values);
    }

    /**
     * Fetch records that have <code>keywords BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfKeywords(JSON lowerInclusive, JSON upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.KEYWORDS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>keywords IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByKeywords(JSON... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.KEYWORDS, values);
    }

    /**
     * Fetch records that have <code>index_node_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfIndexNodeId(String lowerInclusive, String upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.INDEX_NODE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>index_node_id IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByIndexNodeId(String... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.INDEX_NODE_ID, values);
    }

    /**
     * Fetch records that have <code>index_node_hash BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfIndexNodeHash(String lowerInclusive, String upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.INDEX_NODE_HASH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>index_node_hash IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByIndexNodeHash(String... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.INDEX_NODE_HASH, values);
    }

    /**
     * Fetch records that have <code>hit_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfHitCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.HIT_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hit_count IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByHitCount(Integer... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.HIT_COUNT, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByEnabled(Boolean... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.ENABLED, values);
    }

    /**
     * Fetch records that have <code>disabled_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfDisabledAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.DISABLED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>disabled_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByDisabledAt(LocalDateTime... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.DISABLED_AT, values);
    }

    /**
     * Fetch records that have <code>disabled_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfDisabledBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.DISABLED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>disabled_by IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByDisabledBy(UUID... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.DISABLED_BY, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByStatus(String... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.STATUS, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfCreatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByCreatedBy(UUID... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>indexing_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfIndexingAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.INDEXING_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>indexing_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByIndexingAt(LocalDateTime... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.INDEXING_AT, values);
    }

    /**
     * Fetch records that have <code>completed_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfCompletedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.COMPLETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>completed_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByCompletedAt(LocalDateTime... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.COMPLETED_AT, values);
    }

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfError(String lowerInclusive, String upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.ERROR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByError(String... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.ERROR, values);
    }

    /**
     * Fetch records that have <code>stopped_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfStoppedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.STOPPED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stopped_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByStoppedAt(LocalDateTime... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.STOPPED_AT, values);
    }

    /**
     * Fetch records that have <code>answer BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfAnswer(String lowerInclusive, String upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.ANSWER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>answer IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByAnswer(String... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.ANSWER, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfUpdatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByUpdatedBy(UUID... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DocumentSegments.DOCUMENT_SEGMENTS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bonc.lops.jooq.tables.pojos.DocumentSegments> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(DocumentSegments.DOCUMENT_SEGMENTS.UPDATED_AT, values);
    }
}
